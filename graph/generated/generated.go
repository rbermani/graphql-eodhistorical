// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"gqlgen-cape/graph/model"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
	Technicals() TechnicalsResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ActivityInvolvement struct {
		Activity    func(childComplexity int) int
		Involvement func(childComplexity int) int
	}

	ActivityInvolvementMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	AddressData struct {
		City    func(childComplexity int) int
		Country func(childComplexity int) int
		State   func(childComplexity int) int
		Street  func(childComplexity int) int
	}

	AnalystRatings struct {
		Buy         func(childComplexity int) int
		Hold        func(childComplexity int) int
		Rating      func(childComplexity int) int
		Sell        func(childComplexity int) int
		StrongBuy   func(childComplexity int) int
		StrongSell  func(childComplexity int) int
		TargetPrice func(childComplexity int) int
	}

	Annual struct {
		Date          func(childComplexity int) int
		DateFormatted func(childComplexity int) int
		Shares        func(childComplexity int) int
		SharesMln     func(childComplexity int) int
	}

	AnnualEarnings struct {
		Date      func(childComplexity int) int
		EpsActual func(childComplexity int) int
	}

	AnnualEarningsMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	AnnualMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	BalanceSheet struct {
		CurrencySymbol func(childComplexity int) int
		Quarterly      func(childComplexity int) int
		Yearly         func(childComplexity int) int
	}

	BalanceSheetItem struct {
		AccountsPayable                                  func(childComplexity int) int
		AccumulatedAmortization                          func(childComplexity int) int
		AccumulatedDepreciation                          func(childComplexity int) int
		AccumulatedOtherComprehensiveIncome              func(childComplexity int) int
		AdditionalPaidInCapital                          func(childComplexity int) int
		CapitalLeaseObligations                          func(childComplexity int) int
		CapitalSurpluse                                  func(childComplexity int) int
		Cash                                             func(childComplexity int) int
		CashAndShortTermInvestments                      func(childComplexity int) int
		CommonStock                                      func(childComplexity int) int
		CommonStockSharesOutstanding                     func(childComplexity int) int
		CommonStockTotalEquity                           func(childComplexity int) int
		CurrencySymbol                                   func(childComplexity int) int
		Date                                             func(childComplexity int) int
		DeferredLongTermAssetCharges                     func(childComplexity int) int
		DeferredLongTermLiab                             func(childComplexity int) int
		EarningAssets                                    func(childComplexity int) int
		FilingDate                                       func(childComplexity int) int
		GoodWill                                         func(childComplexity int) int
		IntangibleAssets                                 func(childComplexity int) int
		Inventory                                        func(childComplexity int) int
		LiabilitiesAndStockholdersEquity                 func(childComplexity int) int
		LongTermDebt                                     func(childComplexity int) int
		LongTermDebtTotal                                func(childComplexity int) int
		LongTermInvestments                              func(childComplexity int) int
		NegativeGoodwill                                 func(childComplexity int) int
		NetDebt                                          func(childComplexity int) int
		NetInvestedCapital                               func(childComplexity int) int
		NetReceivables                                   func(childComplexity int) int
		NetTangibleAssets                                func(childComplexity int) int
		NetWorkingCapital                                func(childComplexity int) int
		NonCurrentAssetsTotal                            func(childComplexity int) int
		NonCurrentLiabilitiesOther                       func(childComplexity int) int
		NonCurrentLiabilitiesTotal                       func(childComplexity int) int
		NonCurrrentAssetsOther                           func(childComplexity int) int
		NoncontrollingInterestInConsolidatedEntity       func(childComplexity int) int
		OtherAssets                                      func(childComplexity int) int
		OtherCurrentAssets                               func(childComplexity int) int
		OtherCurrentLiab                                 func(childComplexity int) int
		OtherLiab                                        func(childComplexity int) int
		OtherStockholderEquity                           func(childComplexity int) int
		PreferredStockRedeemable                         func(childComplexity int) int
		PreferredStockTotalEquity                        func(childComplexity int) int
		PropertyPlantAndEquipmentGross                   func(childComplexity int) int
		PropertyPlantAndEquipmentNet                     func(childComplexity int) int
		PropertyPlantEquipment                           func(childComplexity int) int
		RetainedEarnings                                 func(childComplexity int) int
		RetainedEarningsTotalEquity                      func(childComplexity int) int
		ShortLongTermDebt                                func(childComplexity int) int
		ShortLongTermDebtTotal                           func(childComplexity int) int
		ShortTermDebt                                    func(childComplexity int) int
		ShortTermInvestments                             func(childComplexity int) int
		TemporaryEquityRedeemableNoncontrollingInterests func(childComplexity int) int
		TotalAssets                                      func(childComplexity int) int
		TotalCurrentAssets                               func(childComplexity int) int
		TotalCurrentLiabilities                          func(childComplexity int) int
		TotalLiab                                        func(childComplexity int) int
		TotalPermanentEquity                             func(childComplexity int) int
		TotalStockholderEquity                           func(childComplexity int) int
		TreasuryStock                                    func(childComplexity int) int
		Warrants                                         func(childComplexity int) int
	}

	BalanceSheetItemMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	CashFlow struct {
		CurrencySymbol func(childComplexity int) int
		Quarterly      func(childComplexity int) int
		Yearly         func(childComplexity int) int
	}

	CashFlowItem struct {
		BeginPeriodCashFlow                   func(childComplexity int) int
		CapitalExpenditures                   func(childComplexity int) int
		CashAndCashEquivalentsChanges         func(childComplexity int) int
		CashFlowsOtherOperating               func(childComplexity int) int
		ChangeInCash                          func(childComplexity int) int
		ChangeInWorkingCapital                func(childComplexity int) int
		ChangeReceivables                     func(childComplexity int) int
		ChangeToAccountReceivables            func(childComplexity int) int
		ChangeToInventory                     func(childComplexity int) int
		ChangeToLiabilities                   func(childComplexity int) int
		ChangeToNetincome                     func(childComplexity int) int
		ChangeToOperatingActivities           func(childComplexity int) int
		CurrencySymbol                        func(childComplexity int) int
		Date                                  func(childComplexity int) int
		Depreciation                          func(childComplexity int) int
		DividendsPaid                         func(childComplexity int) int
		EndPeriodCashFlow                     func(childComplexity int) int
		ExchangeRateChanges                   func(childComplexity int) int
		FilingDate                            func(childComplexity int) int
		FreeCashFlow                          func(childComplexity int) int
		Investments                           func(childComplexity int) int
		NetBorrowings                         func(childComplexity int) int
		NetIncome                             func(childComplexity int) int
		OtherCashflowsFromFinancingActivities func(childComplexity int) int
		OtherCashflowsFromInvestingActivities func(childComplexity int) int
		OtherNonCashItems                     func(childComplexity int) int
		SalePurchaseOfStock                   func(childComplexity int) int
		TotalCashFromFinancingActivities      func(childComplexity int) int
		TotalCashFromOperatingActivities      func(childComplexity int) int
		TotalCashflowsFromInvestingActivities func(childComplexity int) int
	}

	CashFlowItemMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	ESGScores struct {
		ActivitiesInvolvement      func(childComplexity int) int
		ControversyLevel           func(childComplexity int) int
		Disclaimer                 func(childComplexity int) int
		EnvironmentScore           func(childComplexity int) int
		EnvironmentScorePercentile func(childComplexity int) int
		GovernanceScore            func(childComplexity int) int
		GovernanceScorePercentile  func(childComplexity int) int
		RatingDate                 func(childComplexity int) int
		SocialScore                func(childComplexity int) int
		SocialScorePercentile      func(childComplexity int) int
		TotalEsg                   func(childComplexity int) int
		TotalEsgPercentile         func(childComplexity int) int
	}

	Earnings struct {
		Annual  func(childComplexity int) int
		History func(childComplexity int) int
		Trend   func(childComplexity int) int
	}

	EquityFundamentals struct {
		AnalystRatings      func(childComplexity int) int
		ESGScores           func(childComplexity int) int
		Earnings            func(childComplexity int) int
		Financials          func(childComplexity int) int
		General             func(childComplexity int) int
		Highlights          func(childComplexity int) int
		Holders             func(childComplexity int) int
		InsiderTransactions func(childComplexity int) int
		OutstandingShares   func(childComplexity int) int
		SharesStats         func(childComplexity int) int
		SplitsDividends     func(childComplexity int) int
		Technicals          func(childComplexity int) int
		Valuation           func(childComplexity int) int
	}

	Financials struct {
		BalanceSheet    func(childComplexity int) int
		CashFlow        func(childComplexity int) int
		IncomeStatement func(childComplexity int) int
	}

	General struct {
		Address               func(childComplexity int) int
		AddressData           func(childComplexity int) int
		Code                  func(childComplexity int) int
		CountryName           func(childComplexity int) int
		CurrencyCode          func(childComplexity int) int
		CurrencyName          func(childComplexity int) int
		CurrencySymbol        func(childComplexity int) int
		Description           func(childComplexity int) int
		EmployerIDNumber      func(childComplexity int) int
		Exchange              func(childComplexity int) int
		FiscalYearEnd         func(childComplexity int) int
		FullTimeEmployees     func(childComplexity int) int
		GicGroup              func(childComplexity int) int
		GicIndustry           func(childComplexity int) int
		GicSector             func(childComplexity int) int
		GicSubIndustry        func(childComplexity int) int
		HomeCategory          func(childComplexity int) int
		Industry              func(childComplexity int) int
		InternationalDomestic func(childComplexity int) int
		IsDelisted            func(childComplexity int) int
		Listings              func(childComplexity int) int
		Name                  func(childComplexity int) int
		Officers              func(childComplexity int) int
		Phone                 func(childComplexity int) int
		Sector                func(childComplexity int) int
		Type                  func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	Highlights struct {
		BookValue               func(childComplexity int) int
		DividendShare           func(childComplexity int) int
		DividendYield           func(childComplexity int) int
		EarningsShare           func(childComplexity int) int
		MarketCapitalization    func(childComplexity int) int
		MarketCapitalizationMln func(childComplexity int) int
		MostRecentQuarter       func(childComplexity int) int
		ProfitMargin            func(childComplexity int) int
		WallStreetTargetPrice   func(childComplexity int) int
	}

	History struct {
		BeforeAfterMarket func(childComplexity int) int
		Currency          func(childComplexity int) int
		Date              func(childComplexity int) int
		EpsActual         func(childComplexity int) int
		EpsDifference     func(childComplexity int) int
		EpsEstimate       func(childComplexity int) int
		ReportDate        func(childComplexity int) int
		SurprisePercent   func(childComplexity int) int
	}

	HistoryMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Holders struct {
		Funds        func(childComplexity int) int
		Institutions func(childComplexity int) int
	}

	IncomeStatement struct {
		CurrencySymbol func(childComplexity int) int
		Quarterly      func(childComplexity int) int
		Yearly         func(childComplexity int) int
	}

	IncomeStatementItem struct {
		CostOfRevenue                     func(childComplexity int) int
		CurrencySymbol                    func(childComplexity int) int
		Date                              func(childComplexity int) int
		DepreciationAndAmortization       func(childComplexity int) int
		DiscontinuedOperations            func(childComplexity int) int
		Ebit                              func(childComplexity int) int
		Ebitda                            func(childComplexity int) int
		EffectOfAccountingCharges         func(childComplexity int) int
		ExtraordinaryItems                func(childComplexity int) int
		FilingDate                        func(childComplexity int) int
		GrossProfit                       func(childComplexity int) int
		IncomeBeforeTax                   func(childComplexity int) int
		IncomeTaxExpense                  func(childComplexity int) int
		InterestExpense                   func(childComplexity int) int
		InterestIncome                    func(childComplexity int) int
		MinorityInterest                  func(childComplexity int) int
		NetIncome                         func(childComplexity int) int
		NetIncomeApplicableToCommonShares func(childComplexity int) int
		NetIncomeFromContinuingOps        func(childComplexity int) int
		NetInterestIncome                 func(childComplexity int) int
		NonOperatingIncomeNetOther        func(childComplexity int) int
		NonRecurring                      func(childComplexity int) int
		OperatingIncome                   func(childComplexity int) int
		OtherItems                        func(childComplexity int) int
		OtherOperatingExpenses            func(childComplexity int) int
		PreferredStockAndOtherAdjustments func(childComplexity int) int
		ReconciledDepreciation            func(childComplexity int) int
		ResearchDevelopment               func(childComplexity int) int
		SellingAndMarketingExpenses       func(childComplexity int) int
		SellingGeneralAdministrative      func(childComplexity int) int
		TaxProvision                      func(childComplexity int) int
		TotalOperatingExpenses            func(childComplexity int) int
		TotalOtherIncomeExpenseNet        func(childComplexity int) int
		TotalRevenue                      func(childComplexity int) int
	}

	IncomeStatementItemMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	InsiderTransaction struct {
		Date                        func(childComplexity int) int
		OwnerCik                    func(childComplexity int) int
		OwnerName                   func(childComplexity int) int
		PostTransactionAmount       func(childComplexity int) int
		SecLink                     func(childComplexity int) int
		TransactionAcquiredDisposed func(childComplexity int) int
		TransactionAmount           func(childComplexity int) int
		TransactionCode             func(childComplexity int) int
		TransactionDate             func(childComplexity int) int
		TransactionPrice            func(childComplexity int) int
	}

	InsiderTransactionMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Institution struct {
		Change        func(childComplexity int) int
		ChangeP       func(childComplexity int) int
		CurrentShares func(childComplexity int) int
		Date          func(childComplexity int) int
		Name          func(childComplexity int) int
		TotalAssets   func(childComplexity int) int
		TotalShares   func(childComplexity int) int
	}

	InstitutionMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Listing struct {
		Code     func(childComplexity int) int
		Exchange func(childComplexity int) int
		Name     func(childComplexity int) int
	}

	ListingMap struct {
		ItemNumber func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	NumberDividendsByYear struct {
		Count func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	NumberDividendsByYearMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Officer struct {
		Name     func(childComplexity int) int
		Title    func(childComplexity int) int
		YearBorn func(childComplexity int) int
	}

	OfficerMap struct {
		ItemNumber func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	OutstandingShares struct {
		Annual    func(childComplexity int) int
		Quarterly func(childComplexity int) int
	}

	Quarterly struct {
		Date          func(childComplexity int) int
		DateFormatted func(childComplexity int) int
		Shares        func(childComplexity int) int
		SharesMln     func(childComplexity int) int
	}

	QuarterlyMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Query struct {
		GetFundamentals func(childComplexity int, ticker *string) int
	}

	SharesStats struct {
		PercentInsiders         func(childComplexity int) int
		PercentInstitutions     func(childComplexity int) int
		SharesFloat             func(childComplexity int) int
		SharesOutstanding       func(childComplexity int) int
		SharesShort             func(childComplexity int) int
		SharesShortPriorMonth   func(childComplexity int) int
		ShortPercentFloat       func(childComplexity int) int
		ShortPercentOutstanding func(childComplexity int) int
		ShortRatio              func(childComplexity int) int
	}

	SplitsDividends struct {
		DividendDate               func(childComplexity int) int
		ExDividendDate             func(childComplexity int) int
		ForwardAnnualDividendRate  func(childComplexity int) int
		ForwardAnnualDividendYield func(childComplexity int) int
		LastSplitDate              func(childComplexity int) int
		LastSplitFactor            func(childComplexity int) int
		NumberDividendsByYear      func(childComplexity int) int
		PayoutRatio                func(childComplexity int) int
	}

	Technicals struct {
		Beta                  func(childComplexity int) int
		DayMa200              func(childComplexity int) int
		DayMa50               func(childComplexity int) int
		SharesShort           func(childComplexity int) int
		SharesShortPriorMonth func(childComplexity int) int
		ShortPercent          func(childComplexity int) int
		ShortRatio            func(childComplexity int) int
		WeekHigh52            func(childComplexity int) int
		WeekLow52             func(childComplexity int) int
	}

	Trend struct {
		Date                             func(childComplexity int) int
		EarningsEstimateAvg              func(childComplexity int) int
		EarningsEstimateGrowth           func(childComplexity int) int
		EarningsEstimateHigh             func(childComplexity int) int
		EarningsEstimateLow              func(childComplexity int) int
		EarningsEstimateNumberOfAnalysts func(childComplexity int) int
		EarningsEstimateYearAgoEps       func(childComplexity int) int
		EpsRevisionsDownLast30days       func(childComplexity int) int
		EpsRevisionsDownLast7days        func(childComplexity int) int
		EpsRevisionsUpLast30days         func(childComplexity int) int
		EpsRevisionsUpLast7days          func(childComplexity int) int
		EpsTrend30daysAgo                func(childComplexity int) int
		EpsTrend60daysAgo                func(childComplexity int) int
		EpsTrend7daysAgo                 func(childComplexity int) int
		EpsTrend90daysAgo                func(childComplexity int) int
		EpsTrendCurrent                  func(childComplexity int) int
		Growth                           func(childComplexity int) int
		Period                           func(childComplexity int) int
		RevenueEstimateAvg               func(childComplexity int) int
		RevenueEstimateGrowth            func(childComplexity int) int
		RevenueEstimateHigh              func(childComplexity int) int
		RevenueEstimateLow               func(childComplexity int) int
		RevenueEstimateNumberOfAnalysts  func(childComplexity int) int
		RevenueEstimateYearAgoEps        func(childComplexity int) int
	}

	TrendMapTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Valuation struct {
		EnterpriseValue        func(childComplexity int) int
		EnterpriseValueEbitda  func(childComplexity int) int
		EnterpriseValueRevenue func(childComplexity int) int
	}
}

type QueryResolver interface {
	GetFundamentals(ctx context.Context, ticker *string) (*model.EquityFundamentals, error)
}
type TechnicalsResolver interface {
	WeekHigh52(ctx context.Context, obj *model.Technicals) (*float64, error)
	WeekLow52(ctx context.Context, obj *model.Technicals) (*float64, error)
	DayMa50(ctx context.Context, obj *model.Technicals) (*float64, error)
	DayMa200(ctx context.Context, obj *model.Technicals) (*float64, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ActivityInvolvement.Activity":
		if e.complexity.ActivityInvolvement.Activity == nil {
			break
		}

		return e.complexity.ActivityInvolvement.Activity(childComplexity), true

	case "ActivityInvolvement.Involvement":
		if e.complexity.ActivityInvolvement.Involvement == nil {
			break
		}

		return e.complexity.ActivityInvolvement.Involvement(childComplexity), true

	case "ActivityInvolvementMapTuple.key":
		if e.complexity.ActivityInvolvementMapTuple.Key == nil {
			break
		}

		return e.complexity.ActivityInvolvementMapTuple.Key(childComplexity), true

	case "ActivityInvolvementMapTuple.value":
		if e.complexity.ActivityInvolvementMapTuple.Value == nil {
			break
		}

		return e.complexity.ActivityInvolvementMapTuple.Value(childComplexity), true

	case "AddressData.City":
		if e.complexity.AddressData.City == nil {
			break
		}

		return e.complexity.AddressData.City(childComplexity), true

	case "AddressData.Country":
		if e.complexity.AddressData.Country == nil {
			break
		}

		return e.complexity.AddressData.Country(childComplexity), true

	case "AddressData.State":
		if e.complexity.AddressData.State == nil {
			break
		}

		return e.complexity.AddressData.State(childComplexity), true

	case "AddressData.Street":
		if e.complexity.AddressData.Street == nil {
			break
		}

		return e.complexity.AddressData.Street(childComplexity), true

	case "AnalystRatings.Buy":
		if e.complexity.AnalystRatings.Buy == nil {
			break
		}

		return e.complexity.AnalystRatings.Buy(childComplexity), true

	case "AnalystRatings.Hold":
		if e.complexity.AnalystRatings.Hold == nil {
			break
		}

		return e.complexity.AnalystRatings.Hold(childComplexity), true

	case "AnalystRatings.Rating":
		if e.complexity.AnalystRatings.Rating == nil {
			break
		}

		return e.complexity.AnalystRatings.Rating(childComplexity), true

	case "AnalystRatings.Sell":
		if e.complexity.AnalystRatings.Sell == nil {
			break
		}

		return e.complexity.AnalystRatings.Sell(childComplexity), true

	case "AnalystRatings.StrongBuy":
		if e.complexity.AnalystRatings.StrongBuy == nil {
			break
		}

		return e.complexity.AnalystRatings.StrongBuy(childComplexity), true

	case "AnalystRatings.StrongSell":
		if e.complexity.AnalystRatings.StrongSell == nil {
			break
		}

		return e.complexity.AnalystRatings.StrongSell(childComplexity), true

	case "AnalystRatings.TargetPrice":
		if e.complexity.AnalystRatings.TargetPrice == nil {
			break
		}

		return e.complexity.AnalystRatings.TargetPrice(childComplexity), true

	case "Annual.date":
		if e.complexity.Annual.Date == nil {
			break
		}

		return e.complexity.Annual.Date(childComplexity), true

	case "Annual.dateFormatted":
		if e.complexity.Annual.DateFormatted == nil {
			break
		}

		return e.complexity.Annual.DateFormatted(childComplexity), true

	case "Annual.shares":
		if e.complexity.Annual.Shares == nil {
			break
		}

		return e.complexity.Annual.Shares(childComplexity), true

	case "Annual.sharesMln":
		if e.complexity.Annual.SharesMln == nil {
			break
		}

		return e.complexity.Annual.SharesMln(childComplexity), true

	case "AnnualEarnings.date":
		if e.complexity.AnnualEarnings.Date == nil {
			break
		}

		return e.complexity.AnnualEarnings.Date(childComplexity), true

	case "AnnualEarnings.epsActual":
		if e.complexity.AnnualEarnings.EpsActual == nil {
			break
		}

		return e.complexity.AnnualEarnings.EpsActual(childComplexity), true

	case "AnnualEarningsMapTuple.key":
		if e.complexity.AnnualEarningsMapTuple.Key == nil {
			break
		}

		return e.complexity.AnnualEarningsMapTuple.Key(childComplexity), true

	case "AnnualEarningsMapTuple.value":
		if e.complexity.AnnualEarningsMapTuple.Value == nil {
			break
		}

		return e.complexity.AnnualEarningsMapTuple.Value(childComplexity), true

	case "AnnualMapTuple.key":
		if e.complexity.AnnualMapTuple.Key == nil {
			break
		}

		return e.complexity.AnnualMapTuple.Key(childComplexity), true

	case "AnnualMapTuple.value":
		if e.complexity.AnnualMapTuple.Value == nil {
			break
		}

		return e.complexity.AnnualMapTuple.Value(childComplexity), true

	case "BalanceSheet.currency_symbol":
		if e.complexity.BalanceSheet.CurrencySymbol == nil {
			break
		}

		return e.complexity.BalanceSheet.CurrencySymbol(childComplexity), true

	case "BalanceSheet.quarterly":
		if e.complexity.BalanceSheet.Quarterly == nil {
			break
		}

		return e.complexity.BalanceSheet.Quarterly(childComplexity), true

	case "BalanceSheet.yearly":
		if e.complexity.BalanceSheet.Yearly == nil {
			break
		}

		return e.complexity.BalanceSheet.Yearly(childComplexity), true

	case "BalanceSheetItem.accountsPayable":
		if e.complexity.BalanceSheetItem.AccountsPayable == nil {
			break
		}

		return e.complexity.BalanceSheetItem.AccountsPayable(childComplexity), true

	case "BalanceSheetItem.accumulatedAmortization":
		if e.complexity.BalanceSheetItem.AccumulatedAmortization == nil {
			break
		}

		return e.complexity.BalanceSheetItem.AccumulatedAmortization(childComplexity), true

	case "BalanceSheetItem.accumulatedDepreciation":
		if e.complexity.BalanceSheetItem.AccumulatedDepreciation == nil {
			break
		}

		return e.complexity.BalanceSheetItem.AccumulatedDepreciation(childComplexity), true

	case "BalanceSheetItem.accumulatedOtherComprehensiveIncome":
		if e.complexity.BalanceSheetItem.AccumulatedOtherComprehensiveIncome == nil {
			break
		}

		return e.complexity.BalanceSheetItem.AccumulatedOtherComprehensiveIncome(childComplexity), true

	case "BalanceSheetItem.additionalPaidInCapital":
		if e.complexity.BalanceSheetItem.AdditionalPaidInCapital == nil {
			break
		}

		return e.complexity.BalanceSheetItem.AdditionalPaidInCapital(childComplexity), true

	case "BalanceSheetItem.capitalLeaseObligations":
		if e.complexity.BalanceSheetItem.CapitalLeaseObligations == nil {
			break
		}

		return e.complexity.BalanceSheetItem.CapitalLeaseObligations(childComplexity), true

	case "BalanceSheetItem.capitalSurpluse":
		if e.complexity.BalanceSheetItem.CapitalSurpluse == nil {
			break
		}

		return e.complexity.BalanceSheetItem.CapitalSurpluse(childComplexity), true

	case "BalanceSheetItem.cash":
		if e.complexity.BalanceSheetItem.Cash == nil {
			break
		}

		return e.complexity.BalanceSheetItem.Cash(childComplexity), true

	case "BalanceSheetItem.cashAndShortTermInvestments":
		if e.complexity.BalanceSheetItem.CashAndShortTermInvestments == nil {
			break
		}

		return e.complexity.BalanceSheetItem.CashAndShortTermInvestments(childComplexity), true

	case "BalanceSheetItem.commonStock":
		if e.complexity.BalanceSheetItem.CommonStock == nil {
			break
		}

		return e.complexity.BalanceSheetItem.CommonStock(childComplexity), true

	case "BalanceSheetItem.commonStockSharesOutstanding":
		if e.complexity.BalanceSheetItem.CommonStockSharesOutstanding == nil {
			break
		}

		return e.complexity.BalanceSheetItem.CommonStockSharesOutstanding(childComplexity), true

	case "BalanceSheetItem.commonStockTotalEquity":
		if e.complexity.BalanceSheetItem.CommonStockTotalEquity == nil {
			break
		}

		return e.complexity.BalanceSheetItem.CommonStockTotalEquity(childComplexity), true

	case "BalanceSheetItem.currency_symbol":
		if e.complexity.BalanceSheetItem.CurrencySymbol == nil {
			break
		}

		return e.complexity.BalanceSheetItem.CurrencySymbol(childComplexity), true

	case "BalanceSheetItem.date":
		if e.complexity.BalanceSheetItem.Date == nil {
			break
		}

		return e.complexity.BalanceSheetItem.Date(childComplexity), true

	case "BalanceSheetItem.deferredLongTermAssetCharges":
		if e.complexity.BalanceSheetItem.DeferredLongTermAssetCharges == nil {
			break
		}

		return e.complexity.BalanceSheetItem.DeferredLongTermAssetCharges(childComplexity), true

	case "BalanceSheetItem.deferredLongTermLiab":
		if e.complexity.BalanceSheetItem.DeferredLongTermLiab == nil {
			break
		}

		return e.complexity.BalanceSheetItem.DeferredLongTermLiab(childComplexity), true

	case "BalanceSheetItem.earningAssets":
		if e.complexity.BalanceSheetItem.EarningAssets == nil {
			break
		}

		return e.complexity.BalanceSheetItem.EarningAssets(childComplexity), true

	case "BalanceSheetItem.filing_date":
		if e.complexity.BalanceSheetItem.FilingDate == nil {
			break
		}

		return e.complexity.BalanceSheetItem.FilingDate(childComplexity), true

	case "BalanceSheetItem.goodWill":
		if e.complexity.BalanceSheetItem.GoodWill == nil {
			break
		}

		return e.complexity.BalanceSheetItem.GoodWill(childComplexity), true

	case "BalanceSheetItem.intangibleAssets":
		if e.complexity.BalanceSheetItem.IntangibleAssets == nil {
			break
		}

		return e.complexity.BalanceSheetItem.IntangibleAssets(childComplexity), true

	case "BalanceSheetItem.inventory":
		if e.complexity.BalanceSheetItem.Inventory == nil {
			break
		}

		return e.complexity.BalanceSheetItem.Inventory(childComplexity), true

	case "BalanceSheetItem.liabilitiesAndStockholdersEquity":
		if e.complexity.BalanceSheetItem.LiabilitiesAndStockholdersEquity == nil {
			break
		}

		return e.complexity.BalanceSheetItem.LiabilitiesAndStockholdersEquity(childComplexity), true

	case "BalanceSheetItem.longTermDebt":
		if e.complexity.BalanceSheetItem.LongTermDebt == nil {
			break
		}

		return e.complexity.BalanceSheetItem.LongTermDebt(childComplexity), true

	case "BalanceSheetItem.longTermDebtTotal":
		if e.complexity.BalanceSheetItem.LongTermDebtTotal == nil {
			break
		}

		return e.complexity.BalanceSheetItem.LongTermDebtTotal(childComplexity), true

	case "BalanceSheetItem.longTermInvestments":
		if e.complexity.BalanceSheetItem.LongTermInvestments == nil {
			break
		}

		return e.complexity.BalanceSheetItem.LongTermInvestments(childComplexity), true

	case "BalanceSheetItem.negativeGoodwill":
		if e.complexity.BalanceSheetItem.NegativeGoodwill == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NegativeGoodwill(childComplexity), true

	case "BalanceSheetItem.netDebt":
		if e.complexity.BalanceSheetItem.NetDebt == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NetDebt(childComplexity), true

	case "BalanceSheetItem.netInvestedCapital":
		if e.complexity.BalanceSheetItem.NetInvestedCapital == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NetInvestedCapital(childComplexity), true

	case "BalanceSheetItem.netReceivables":
		if e.complexity.BalanceSheetItem.NetReceivables == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NetReceivables(childComplexity), true

	case "BalanceSheetItem.netTangibleAssets":
		if e.complexity.BalanceSheetItem.NetTangibleAssets == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NetTangibleAssets(childComplexity), true

	case "BalanceSheetItem.netWorkingCapital":
		if e.complexity.BalanceSheetItem.NetWorkingCapital == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NetWorkingCapital(childComplexity), true

	case "BalanceSheetItem.nonCurrentAssetsTotal":
		if e.complexity.BalanceSheetItem.NonCurrentAssetsTotal == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NonCurrentAssetsTotal(childComplexity), true

	case "BalanceSheetItem.nonCurrentLiabilitiesOther":
		if e.complexity.BalanceSheetItem.NonCurrentLiabilitiesOther == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NonCurrentLiabilitiesOther(childComplexity), true

	case "BalanceSheetItem.nonCurrentLiabilitiesTotal":
		if e.complexity.BalanceSheetItem.NonCurrentLiabilitiesTotal == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NonCurrentLiabilitiesTotal(childComplexity), true

	case "BalanceSheetItem.nonCurrrentAssetsOther":
		if e.complexity.BalanceSheetItem.NonCurrrentAssetsOther == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NonCurrrentAssetsOther(childComplexity), true

	case "BalanceSheetItem.noncontrollingInterestInConsolidatedEntity":
		if e.complexity.BalanceSheetItem.NoncontrollingInterestInConsolidatedEntity == nil {
			break
		}

		return e.complexity.BalanceSheetItem.NoncontrollingInterestInConsolidatedEntity(childComplexity), true

	case "BalanceSheetItem.otherAssets":
		if e.complexity.BalanceSheetItem.OtherAssets == nil {
			break
		}

		return e.complexity.BalanceSheetItem.OtherAssets(childComplexity), true

	case "BalanceSheetItem.otherCurrentAssets":
		if e.complexity.BalanceSheetItem.OtherCurrentAssets == nil {
			break
		}

		return e.complexity.BalanceSheetItem.OtherCurrentAssets(childComplexity), true

	case "BalanceSheetItem.otherCurrentLiab":
		if e.complexity.BalanceSheetItem.OtherCurrentLiab == nil {
			break
		}

		return e.complexity.BalanceSheetItem.OtherCurrentLiab(childComplexity), true

	case "BalanceSheetItem.otherLiab":
		if e.complexity.BalanceSheetItem.OtherLiab == nil {
			break
		}

		return e.complexity.BalanceSheetItem.OtherLiab(childComplexity), true

	case "BalanceSheetItem.otherStockholderEquity":
		if e.complexity.BalanceSheetItem.OtherStockholderEquity == nil {
			break
		}

		return e.complexity.BalanceSheetItem.OtherStockholderEquity(childComplexity), true

	case "BalanceSheetItem.preferredStockRedeemable":
		if e.complexity.BalanceSheetItem.PreferredStockRedeemable == nil {
			break
		}

		return e.complexity.BalanceSheetItem.PreferredStockRedeemable(childComplexity), true

	case "BalanceSheetItem.preferredStockTotalEquity":
		if e.complexity.BalanceSheetItem.PreferredStockTotalEquity == nil {
			break
		}

		return e.complexity.BalanceSheetItem.PreferredStockTotalEquity(childComplexity), true

	case "BalanceSheetItem.propertyPlantAndEquipmentGross":
		if e.complexity.BalanceSheetItem.PropertyPlantAndEquipmentGross == nil {
			break
		}

		return e.complexity.BalanceSheetItem.PropertyPlantAndEquipmentGross(childComplexity), true

	case "BalanceSheetItem.propertyPlantAndEquipmentNet":
		if e.complexity.BalanceSheetItem.PropertyPlantAndEquipmentNet == nil {
			break
		}

		return e.complexity.BalanceSheetItem.PropertyPlantAndEquipmentNet(childComplexity), true

	case "BalanceSheetItem.propertyPlantEquipment":
		if e.complexity.BalanceSheetItem.PropertyPlantEquipment == nil {
			break
		}

		return e.complexity.BalanceSheetItem.PropertyPlantEquipment(childComplexity), true

	case "BalanceSheetItem.retainedEarnings":
		if e.complexity.BalanceSheetItem.RetainedEarnings == nil {
			break
		}

		return e.complexity.BalanceSheetItem.RetainedEarnings(childComplexity), true

	case "BalanceSheetItem.retainedEarningsTotalEquity":
		if e.complexity.BalanceSheetItem.RetainedEarningsTotalEquity == nil {
			break
		}

		return e.complexity.BalanceSheetItem.RetainedEarningsTotalEquity(childComplexity), true

	case "BalanceSheetItem.shortLongTermDebt":
		if e.complexity.BalanceSheetItem.ShortLongTermDebt == nil {
			break
		}

		return e.complexity.BalanceSheetItem.ShortLongTermDebt(childComplexity), true

	case "BalanceSheetItem.shortLongTermDebtTotal":
		if e.complexity.BalanceSheetItem.ShortLongTermDebtTotal == nil {
			break
		}

		return e.complexity.BalanceSheetItem.ShortLongTermDebtTotal(childComplexity), true

	case "BalanceSheetItem.shortTermDebt":
		if e.complexity.BalanceSheetItem.ShortTermDebt == nil {
			break
		}

		return e.complexity.BalanceSheetItem.ShortTermDebt(childComplexity), true

	case "BalanceSheetItem.shortTermInvestments":
		if e.complexity.BalanceSheetItem.ShortTermInvestments == nil {
			break
		}

		return e.complexity.BalanceSheetItem.ShortTermInvestments(childComplexity), true

	case "BalanceSheetItem.temporaryEquityRedeemableNoncontrollingInterests":
		if e.complexity.BalanceSheetItem.TemporaryEquityRedeemableNoncontrollingInterests == nil {
			break
		}

		return e.complexity.BalanceSheetItem.TemporaryEquityRedeemableNoncontrollingInterests(childComplexity), true

	case "BalanceSheetItem.totalAssets":
		if e.complexity.BalanceSheetItem.TotalAssets == nil {
			break
		}

		return e.complexity.BalanceSheetItem.TotalAssets(childComplexity), true

	case "BalanceSheetItem.totalCurrentAssets":
		if e.complexity.BalanceSheetItem.TotalCurrentAssets == nil {
			break
		}

		return e.complexity.BalanceSheetItem.TotalCurrentAssets(childComplexity), true

	case "BalanceSheetItem.totalCurrentLiabilities":
		if e.complexity.BalanceSheetItem.TotalCurrentLiabilities == nil {
			break
		}

		return e.complexity.BalanceSheetItem.TotalCurrentLiabilities(childComplexity), true

	case "BalanceSheetItem.totalLiab":
		if e.complexity.BalanceSheetItem.TotalLiab == nil {
			break
		}

		return e.complexity.BalanceSheetItem.TotalLiab(childComplexity), true

	case "BalanceSheetItem.totalPermanentEquity":
		if e.complexity.BalanceSheetItem.TotalPermanentEquity == nil {
			break
		}

		return e.complexity.BalanceSheetItem.TotalPermanentEquity(childComplexity), true

	case "BalanceSheetItem.totalStockholderEquity":
		if e.complexity.BalanceSheetItem.TotalStockholderEquity == nil {
			break
		}

		return e.complexity.BalanceSheetItem.TotalStockholderEquity(childComplexity), true

	case "BalanceSheetItem.treasuryStock":
		if e.complexity.BalanceSheetItem.TreasuryStock == nil {
			break
		}

		return e.complexity.BalanceSheetItem.TreasuryStock(childComplexity), true

	case "BalanceSheetItem.warrants":
		if e.complexity.BalanceSheetItem.Warrants == nil {
			break
		}

		return e.complexity.BalanceSheetItem.Warrants(childComplexity), true

	case "BalanceSheetItemMapTuple.key":
		if e.complexity.BalanceSheetItemMapTuple.Key == nil {
			break
		}

		return e.complexity.BalanceSheetItemMapTuple.Key(childComplexity), true

	case "BalanceSheetItemMapTuple.value":
		if e.complexity.BalanceSheetItemMapTuple.Value == nil {
			break
		}

		return e.complexity.BalanceSheetItemMapTuple.Value(childComplexity), true

	case "CashFlow.currency_symbol":
		if e.complexity.CashFlow.CurrencySymbol == nil {
			break
		}

		return e.complexity.CashFlow.CurrencySymbol(childComplexity), true

	case "CashFlow.quarterly":
		if e.complexity.CashFlow.Quarterly == nil {
			break
		}

		return e.complexity.CashFlow.Quarterly(childComplexity), true

	case "CashFlow.yearly":
		if e.complexity.CashFlow.Yearly == nil {
			break
		}

		return e.complexity.CashFlow.Yearly(childComplexity), true

	case "CashFlowItem.beginPeriodCashFlow":
		if e.complexity.CashFlowItem.BeginPeriodCashFlow == nil {
			break
		}

		return e.complexity.CashFlowItem.BeginPeriodCashFlow(childComplexity), true

	case "CashFlowItem.capitalExpenditures":
		if e.complexity.CashFlowItem.CapitalExpenditures == nil {
			break
		}

		return e.complexity.CashFlowItem.CapitalExpenditures(childComplexity), true

	case "CashFlowItem.cashAndCashEquivalentsChanges":
		if e.complexity.CashFlowItem.CashAndCashEquivalentsChanges == nil {
			break
		}

		return e.complexity.CashFlowItem.CashAndCashEquivalentsChanges(childComplexity), true

	case "CashFlowItem.cashFlowsOtherOperating":
		if e.complexity.CashFlowItem.CashFlowsOtherOperating == nil {
			break
		}

		return e.complexity.CashFlowItem.CashFlowsOtherOperating(childComplexity), true

	case "CashFlowItem.changeInCash":
		if e.complexity.CashFlowItem.ChangeInCash == nil {
			break
		}

		return e.complexity.CashFlowItem.ChangeInCash(childComplexity), true

	case "CashFlowItem.changeInWorkingCapital":
		if e.complexity.CashFlowItem.ChangeInWorkingCapital == nil {
			break
		}

		return e.complexity.CashFlowItem.ChangeInWorkingCapital(childComplexity), true

	case "CashFlowItem.changeReceivables":
		if e.complexity.CashFlowItem.ChangeReceivables == nil {
			break
		}

		return e.complexity.CashFlowItem.ChangeReceivables(childComplexity), true

	case "CashFlowItem.changeToAccountReceivables":
		if e.complexity.CashFlowItem.ChangeToAccountReceivables == nil {
			break
		}

		return e.complexity.CashFlowItem.ChangeToAccountReceivables(childComplexity), true

	case "CashFlowItem.changeToInventory":
		if e.complexity.CashFlowItem.ChangeToInventory == nil {
			break
		}

		return e.complexity.CashFlowItem.ChangeToInventory(childComplexity), true

	case "CashFlowItem.changeToLiabilities":
		if e.complexity.CashFlowItem.ChangeToLiabilities == nil {
			break
		}

		return e.complexity.CashFlowItem.ChangeToLiabilities(childComplexity), true

	case "CashFlowItem.changeToNetincome":
		if e.complexity.CashFlowItem.ChangeToNetincome == nil {
			break
		}

		return e.complexity.CashFlowItem.ChangeToNetincome(childComplexity), true

	case "CashFlowItem.changeToOperatingActivities":
		if e.complexity.CashFlowItem.ChangeToOperatingActivities == nil {
			break
		}

		return e.complexity.CashFlowItem.ChangeToOperatingActivities(childComplexity), true

	case "CashFlowItem.currency_symbol":
		if e.complexity.CashFlowItem.CurrencySymbol == nil {
			break
		}

		return e.complexity.CashFlowItem.CurrencySymbol(childComplexity), true

	case "CashFlowItem.date":
		if e.complexity.CashFlowItem.Date == nil {
			break
		}

		return e.complexity.CashFlowItem.Date(childComplexity), true

	case "CashFlowItem.depreciation":
		if e.complexity.CashFlowItem.Depreciation == nil {
			break
		}

		return e.complexity.CashFlowItem.Depreciation(childComplexity), true

	case "CashFlowItem.dividendsPaid":
		if e.complexity.CashFlowItem.DividendsPaid == nil {
			break
		}

		return e.complexity.CashFlowItem.DividendsPaid(childComplexity), true

	case "CashFlowItem.endPeriodCashFlow":
		if e.complexity.CashFlowItem.EndPeriodCashFlow == nil {
			break
		}

		return e.complexity.CashFlowItem.EndPeriodCashFlow(childComplexity), true

	case "CashFlowItem.exchangeRateChanges":
		if e.complexity.CashFlowItem.ExchangeRateChanges == nil {
			break
		}

		return e.complexity.CashFlowItem.ExchangeRateChanges(childComplexity), true

	case "CashFlowItem.filing_date":
		if e.complexity.CashFlowItem.FilingDate == nil {
			break
		}

		return e.complexity.CashFlowItem.FilingDate(childComplexity), true

	case "CashFlowItem.freeCashFlow":
		if e.complexity.CashFlowItem.FreeCashFlow == nil {
			break
		}

		return e.complexity.CashFlowItem.FreeCashFlow(childComplexity), true

	case "CashFlowItem.investments":
		if e.complexity.CashFlowItem.Investments == nil {
			break
		}

		return e.complexity.CashFlowItem.Investments(childComplexity), true

	case "CashFlowItem.netBorrowings":
		if e.complexity.CashFlowItem.NetBorrowings == nil {
			break
		}

		return e.complexity.CashFlowItem.NetBorrowings(childComplexity), true

	case "CashFlowItem.netIncome":
		if e.complexity.CashFlowItem.NetIncome == nil {
			break
		}

		return e.complexity.CashFlowItem.NetIncome(childComplexity), true

	case "CashFlowItem.otherCashflowsFromFinancingActivities":
		if e.complexity.CashFlowItem.OtherCashflowsFromFinancingActivities == nil {
			break
		}

		return e.complexity.CashFlowItem.OtherCashflowsFromFinancingActivities(childComplexity), true

	case "CashFlowItem.otherCashflowsFromInvestingActivities":
		if e.complexity.CashFlowItem.OtherCashflowsFromInvestingActivities == nil {
			break
		}

		return e.complexity.CashFlowItem.OtherCashflowsFromInvestingActivities(childComplexity), true

	case "CashFlowItem.otherNonCashItems":
		if e.complexity.CashFlowItem.OtherNonCashItems == nil {
			break
		}

		return e.complexity.CashFlowItem.OtherNonCashItems(childComplexity), true

	case "CashFlowItem.salePurchaseOfStock":
		if e.complexity.CashFlowItem.SalePurchaseOfStock == nil {
			break
		}

		return e.complexity.CashFlowItem.SalePurchaseOfStock(childComplexity), true

	case "CashFlowItem.totalCashFromFinancingActivities":
		if e.complexity.CashFlowItem.TotalCashFromFinancingActivities == nil {
			break
		}

		return e.complexity.CashFlowItem.TotalCashFromFinancingActivities(childComplexity), true

	case "CashFlowItem.totalCashFromOperatingActivities":
		if e.complexity.CashFlowItem.TotalCashFromOperatingActivities == nil {
			break
		}

		return e.complexity.CashFlowItem.TotalCashFromOperatingActivities(childComplexity), true

	case "CashFlowItem.totalCashflowsFromInvestingActivities":
		if e.complexity.CashFlowItem.TotalCashflowsFromInvestingActivities == nil {
			break
		}

		return e.complexity.CashFlowItem.TotalCashflowsFromInvestingActivities(childComplexity), true

	case "CashFlowItemMapTuple.key":
		if e.complexity.CashFlowItemMapTuple.Key == nil {
			break
		}

		return e.complexity.CashFlowItemMapTuple.Key(childComplexity), true

	case "CashFlowItemMapTuple.value":
		if e.complexity.CashFlowItemMapTuple.Value == nil {
			break
		}

		return e.complexity.CashFlowItemMapTuple.Value(childComplexity), true

	case "ESGScores.ActivitiesInvolvement":
		if e.complexity.ESGScores.ActivitiesInvolvement == nil {
			break
		}

		return e.complexity.ESGScores.ActivitiesInvolvement(childComplexity), true

	case "ESGScores.ControversyLevel":
		if e.complexity.ESGScores.ControversyLevel == nil {
			break
		}

		return e.complexity.ESGScores.ControversyLevel(childComplexity), true

	case "ESGScores.Disclaimer":
		if e.complexity.ESGScores.Disclaimer == nil {
			break
		}

		return e.complexity.ESGScores.Disclaimer(childComplexity), true

	case "ESGScores.EnvironmentScore":
		if e.complexity.ESGScores.EnvironmentScore == nil {
			break
		}

		return e.complexity.ESGScores.EnvironmentScore(childComplexity), true

	case "ESGScores.EnvironmentScorePercentile":
		if e.complexity.ESGScores.EnvironmentScorePercentile == nil {
			break
		}

		return e.complexity.ESGScores.EnvironmentScorePercentile(childComplexity), true

	case "ESGScores.GovernanceScore":
		if e.complexity.ESGScores.GovernanceScore == nil {
			break
		}

		return e.complexity.ESGScores.GovernanceScore(childComplexity), true

	case "ESGScores.GovernanceScorePercentile":
		if e.complexity.ESGScores.GovernanceScorePercentile == nil {
			break
		}

		return e.complexity.ESGScores.GovernanceScorePercentile(childComplexity), true

	case "ESGScores.RatingDate":
		if e.complexity.ESGScores.RatingDate == nil {
			break
		}

		return e.complexity.ESGScores.RatingDate(childComplexity), true

	case "ESGScores.SocialScore":
		if e.complexity.ESGScores.SocialScore == nil {
			break
		}

		return e.complexity.ESGScores.SocialScore(childComplexity), true

	case "ESGScores.SocialScorePercentile":
		if e.complexity.ESGScores.SocialScorePercentile == nil {
			break
		}

		return e.complexity.ESGScores.SocialScorePercentile(childComplexity), true

	case "ESGScores.TotalEsg":
		if e.complexity.ESGScores.TotalEsg == nil {
			break
		}

		return e.complexity.ESGScores.TotalEsg(childComplexity), true

	case "ESGScores.TotalEsgPercentile":
		if e.complexity.ESGScores.TotalEsgPercentile == nil {
			break
		}

		return e.complexity.ESGScores.TotalEsgPercentile(childComplexity), true

	case "Earnings.Annual":
		if e.complexity.Earnings.Annual == nil {
			break
		}

		return e.complexity.Earnings.Annual(childComplexity), true

	case "Earnings.History":
		if e.complexity.Earnings.History == nil {
			break
		}

		return e.complexity.Earnings.History(childComplexity), true

	case "Earnings.Trend":
		if e.complexity.Earnings.Trend == nil {
			break
		}

		return e.complexity.Earnings.Trend(childComplexity), true

	case "EquityFundamentals.AnalystRatings":
		if e.complexity.EquityFundamentals.AnalystRatings == nil {
			break
		}

		return e.complexity.EquityFundamentals.AnalystRatings(childComplexity), true

	case "EquityFundamentals.ESGScores":
		if e.complexity.EquityFundamentals.ESGScores == nil {
			break
		}

		return e.complexity.EquityFundamentals.ESGScores(childComplexity), true

	case "EquityFundamentals.Earnings":
		if e.complexity.EquityFundamentals.Earnings == nil {
			break
		}

		return e.complexity.EquityFundamentals.Earnings(childComplexity), true

	case "EquityFundamentals.Financials":
		if e.complexity.EquityFundamentals.Financials == nil {
			break
		}

		return e.complexity.EquityFundamentals.Financials(childComplexity), true

	case "EquityFundamentals.General":
		if e.complexity.EquityFundamentals.General == nil {
			break
		}

		return e.complexity.EquityFundamentals.General(childComplexity), true

	case "EquityFundamentals.Highlights":
		if e.complexity.EquityFundamentals.Highlights == nil {
			break
		}

		return e.complexity.EquityFundamentals.Highlights(childComplexity), true

	case "EquityFundamentals.Holders":
		if e.complexity.EquityFundamentals.Holders == nil {
			break
		}

		return e.complexity.EquityFundamentals.Holders(childComplexity), true

	case "EquityFundamentals.InsiderTransactions":
		if e.complexity.EquityFundamentals.InsiderTransactions == nil {
			break
		}

		return e.complexity.EquityFundamentals.InsiderTransactions(childComplexity), true

	case "EquityFundamentals.OutstandingShares":
		if e.complexity.EquityFundamentals.OutstandingShares == nil {
			break
		}

		return e.complexity.EquityFundamentals.OutstandingShares(childComplexity), true

	case "EquityFundamentals.SharesStats":
		if e.complexity.EquityFundamentals.SharesStats == nil {
			break
		}

		return e.complexity.EquityFundamentals.SharesStats(childComplexity), true

	case "EquityFundamentals.SplitsDividends":
		if e.complexity.EquityFundamentals.SplitsDividends == nil {
			break
		}

		return e.complexity.EquityFundamentals.SplitsDividends(childComplexity), true

	case "EquityFundamentals.Technicals":
		if e.complexity.EquityFundamentals.Technicals == nil {
			break
		}

		return e.complexity.EquityFundamentals.Technicals(childComplexity), true

	case "EquityFundamentals.Valuation":
		if e.complexity.EquityFundamentals.Valuation == nil {
			break
		}

		return e.complexity.EquityFundamentals.Valuation(childComplexity), true

	case "Financials.Balance_Sheet":
		if e.complexity.Financials.BalanceSheet == nil {
			break
		}

		return e.complexity.Financials.BalanceSheet(childComplexity), true

	case "Financials.Cash_Flow":
		if e.complexity.Financials.CashFlow == nil {
			break
		}

		return e.complexity.Financials.CashFlow(childComplexity), true

	case "Financials.Income_Statement":
		if e.complexity.Financials.IncomeStatement == nil {
			break
		}

		return e.complexity.Financials.IncomeStatement(childComplexity), true

	case "General.Address":
		if e.complexity.General.Address == nil {
			break
		}

		return e.complexity.General.Address(childComplexity), true

	case "General.AddressData":
		if e.complexity.General.AddressData == nil {
			break
		}

		return e.complexity.General.AddressData(childComplexity), true

	case "General.Code":
		if e.complexity.General.Code == nil {
			break
		}

		return e.complexity.General.Code(childComplexity), true

	case "General.CountryName":
		if e.complexity.General.CountryName == nil {
			break
		}

		return e.complexity.General.CountryName(childComplexity), true

	case "General.CurrencyCode":
		if e.complexity.General.CurrencyCode == nil {
			break
		}

		return e.complexity.General.CurrencyCode(childComplexity), true

	case "General.CurrencyName":
		if e.complexity.General.CurrencyName == nil {
			break
		}

		return e.complexity.General.CurrencyName(childComplexity), true

	case "General.CurrencySymbol":
		if e.complexity.General.CurrencySymbol == nil {
			break
		}

		return e.complexity.General.CurrencySymbol(childComplexity), true

	case "General.Description":
		if e.complexity.General.Description == nil {
			break
		}

		return e.complexity.General.Description(childComplexity), true

	case "General.EmployerIdNumber":
		if e.complexity.General.EmployerIDNumber == nil {
			break
		}

		return e.complexity.General.EmployerIDNumber(childComplexity), true

	case "General.Exchange":
		if e.complexity.General.Exchange == nil {
			break
		}

		return e.complexity.General.Exchange(childComplexity), true

	case "General.FiscalYearEnd":
		if e.complexity.General.FiscalYearEnd == nil {
			break
		}

		return e.complexity.General.FiscalYearEnd(childComplexity), true

	case "General.FullTimeEmployees":
		if e.complexity.General.FullTimeEmployees == nil {
			break
		}

		return e.complexity.General.FullTimeEmployees(childComplexity), true

	case "General.GicGroup":
		if e.complexity.General.GicGroup == nil {
			break
		}

		return e.complexity.General.GicGroup(childComplexity), true

	case "General.GicIndustry":
		if e.complexity.General.GicIndustry == nil {
			break
		}

		return e.complexity.General.GicIndustry(childComplexity), true

	case "General.GicSector":
		if e.complexity.General.GicSector == nil {
			break
		}

		return e.complexity.General.GicSector(childComplexity), true

	case "General.GicSubIndustry":
		if e.complexity.General.GicSubIndustry == nil {
			break
		}

		return e.complexity.General.GicSubIndustry(childComplexity), true

	case "General.HomeCategory":
		if e.complexity.General.HomeCategory == nil {
			break
		}

		return e.complexity.General.HomeCategory(childComplexity), true

	case "General.Industry":
		if e.complexity.General.Industry == nil {
			break
		}

		return e.complexity.General.Industry(childComplexity), true

	case "General.InternationalDomestic":
		if e.complexity.General.InternationalDomestic == nil {
			break
		}

		return e.complexity.General.InternationalDomestic(childComplexity), true

	case "General.IsDelisted":
		if e.complexity.General.IsDelisted == nil {
			break
		}

		return e.complexity.General.IsDelisted(childComplexity), true

	case "General.Listings":
		if e.complexity.General.Listings == nil {
			break
		}

		return e.complexity.General.Listings(childComplexity), true

	case "General.Name":
		if e.complexity.General.Name == nil {
			break
		}

		return e.complexity.General.Name(childComplexity), true

	case "General.Officers":
		if e.complexity.General.Officers == nil {
			break
		}

		return e.complexity.General.Officers(childComplexity), true

	case "General.Phone":
		if e.complexity.General.Phone == nil {
			break
		}

		return e.complexity.General.Phone(childComplexity), true

	case "General.Sector":
		if e.complexity.General.Sector == nil {
			break
		}

		return e.complexity.General.Sector(childComplexity), true

	case "General.Type":
		if e.complexity.General.Type == nil {
			break
		}

		return e.complexity.General.Type(childComplexity), true

	case "General.UpdatedAt":
		if e.complexity.General.UpdatedAt == nil {
			break
		}

		return e.complexity.General.UpdatedAt(childComplexity), true

	case "Highlights.BookValue":
		if e.complexity.Highlights.BookValue == nil {
			break
		}

		return e.complexity.Highlights.BookValue(childComplexity), true

	case "Highlights.DividendShare":
		if e.complexity.Highlights.DividendShare == nil {
			break
		}

		return e.complexity.Highlights.DividendShare(childComplexity), true

	case "Highlights.DividendYield":
		if e.complexity.Highlights.DividendYield == nil {
			break
		}

		return e.complexity.Highlights.DividendYield(childComplexity), true

	case "Highlights.EarningsShare":
		if e.complexity.Highlights.EarningsShare == nil {
			break
		}

		return e.complexity.Highlights.EarningsShare(childComplexity), true

	case "Highlights.MarketCapitalization":
		if e.complexity.Highlights.MarketCapitalization == nil {
			break
		}

		return e.complexity.Highlights.MarketCapitalization(childComplexity), true

	case "Highlights.MarketCapitalizationMln":
		if e.complexity.Highlights.MarketCapitalizationMln == nil {
			break
		}

		return e.complexity.Highlights.MarketCapitalizationMln(childComplexity), true

	case "Highlights.MostRecentQuarter":
		if e.complexity.Highlights.MostRecentQuarter == nil {
			break
		}

		return e.complexity.Highlights.MostRecentQuarter(childComplexity), true

	case "Highlights.ProfitMargin":
		if e.complexity.Highlights.ProfitMargin == nil {
			break
		}

		return e.complexity.Highlights.ProfitMargin(childComplexity), true

	case "Highlights.WallStreetTargetPrice":
		if e.complexity.Highlights.WallStreetTargetPrice == nil {
			break
		}

		return e.complexity.Highlights.WallStreetTargetPrice(childComplexity), true

	case "History.beforeAfterMarket":
		if e.complexity.History.BeforeAfterMarket == nil {
			break
		}

		return e.complexity.History.BeforeAfterMarket(childComplexity), true

	case "History.currency":
		if e.complexity.History.Currency == nil {
			break
		}

		return e.complexity.History.Currency(childComplexity), true

	case "History.date":
		if e.complexity.History.Date == nil {
			break
		}

		return e.complexity.History.Date(childComplexity), true

	case "History.epsActual":
		if e.complexity.History.EpsActual == nil {
			break
		}

		return e.complexity.History.EpsActual(childComplexity), true

	case "History.epsDifference":
		if e.complexity.History.EpsDifference == nil {
			break
		}

		return e.complexity.History.EpsDifference(childComplexity), true

	case "History.epsEstimate":
		if e.complexity.History.EpsEstimate == nil {
			break
		}

		return e.complexity.History.EpsEstimate(childComplexity), true

	case "History.reportDate":
		if e.complexity.History.ReportDate == nil {
			break
		}

		return e.complexity.History.ReportDate(childComplexity), true

	case "History.surprisePercent":
		if e.complexity.History.SurprisePercent == nil {
			break
		}

		return e.complexity.History.SurprisePercent(childComplexity), true

	case "HistoryMapTuple.key":
		if e.complexity.HistoryMapTuple.Key == nil {
			break
		}

		return e.complexity.HistoryMapTuple.Key(childComplexity), true

	case "HistoryMapTuple.value":
		if e.complexity.HistoryMapTuple.Value == nil {
			break
		}

		return e.complexity.HistoryMapTuple.Value(childComplexity), true

	case "Holders.Funds":
		if e.complexity.Holders.Funds == nil {
			break
		}

		return e.complexity.Holders.Funds(childComplexity), true

	case "Holders.Institutions":
		if e.complexity.Holders.Institutions == nil {
			break
		}

		return e.complexity.Holders.Institutions(childComplexity), true

	case "IncomeStatement.currency_symbol":
		if e.complexity.IncomeStatement.CurrencySymbol == nil {
			break
		}

		return e.complexity.IncomeStatement.CurrencySymbol(childComplexity), true

	case "IncomeStatement.quarterly":
		if e.complexity.IncomeStatement.Quarterly == nil {
			break
		}

		return e.complexity.IncomeStatement.Quarterly(childComplexity), true

	case "IncomeStatement.yearly":
		if e.complexity.IncomeStatement.Yearly == nil {
			break
		}

		return e.complexity.IncomeStatement.Yearly(childComplexity), true

	case "IncomeStatementItem.costOfRevenue":
		if e.complexity.IncomeStatementItem.CostOfRevenue == nil {
			break
		}

		return e.complexity.IncomeStatementItem.CostOfRevenue(childComplexity), true

	case "IncomeStatementItem.currency_symbol":
		if e.complexity.IncomeStatementItem.CurrencySymbol == nil {
			break
		}

		return e.complexity.IncomeStatementItem.CurrencySymbol(childComplexity), true

	case "IncomeStatementItem.date":
		if e.complexity.IncomeStatementItem.Date == nil {
			break
		}

		return e.complexity.IncomeStatementItem.Date(childComplexity), true

	case "IncomeStatementItem.depreciationAndAmortization":
		if e.complexity.IncomeStatementItem.DepreciationAndAmortization == nil {
			break
		}

		return e.complexity.IncomeStatementItem.DepreciationAndAmortization(childComplexity), true

	case "IncomeStatementItem.discontinuedOperations":
		if e.complexity.IncomeStatementItem.DiscontinuedOperations == nil {
			break
		}

		return e.complexity.IncomeStatementItem.DiscontinuedOperations(childComplexity), true

	case "IncomeStatementItem.ebit":
		if e.complexity.IncomeStatementItem.Ebit == nil {
			break
		}

		return e.complexity.IncomeStatementItem.Ebit(childComplexity), true

	case "IncomeStatementItem.ebitda":
		if e.complexity.IncomeStatementItem.Ebitda == nil {
			break
		}

		return e.complexity.IncomeStatementItem.Ebitda(childComplexity), true

	case "IncomeStatementItem.effectOfAccountingCharges":
		if e.complexity.IncomeStatementItem.EffectOfAccountingCharges == nil {
			break
		}

		return e.complexity.IncomeStatementItem.EffectOfAccountingCharges(childComplexity), true

	case "IncomeStatementItem.extraordinaryItems":
		if e.complexity.IncomeStatementItem.ExtraordinaryItems == nil {
			break
		}

		return e.complexity.IncomeStatementItem.ExtraordinaryItems(childComplexity), true

	case "IncomeStatementItem.filing_date":
		if e.complexity.IncomeStatementItem.FilingDate == nil {
			break
		}

		return e.complexity.IncomeStatementItem.FilingDate(childComplexity), true

	case "IncomeStatementItem.grossProfit":
		if e.complexity.IncomeStatementItem.GrossProfit == nil {
			break
		}

		return e.complexity.IncomeStatementItem.GrossProfit(childComplexity), true

	case "IncomeStatementItem.incomeBeforeTax":
		if e.complexity.IncomeStatementItem.IncomeBeforeTax == nil {
			break
		}

		return e.complexity.IncomeStatementItem.IncomeBeforeTax(childComplexity), true

	case "IncomeStatementItem.incomeTaxExpense":
		if e.complexity.IncomeStatementItem.IncomeTaxExpense == nil {
			break
		}

		return e.complexity.IncomeStatementItem.IncomeTaxExpense(childComplexity), true

	case "IncomeStatementItem.interestExpense":
		if e.complexity.IncomeStatementItem.InterestExpense == nil {
			break
		}

		return e.complexity.IncomeStatementItem.InterestExpense(childComplexity), true

	case "IncomeStatementItem.interestIncome":
		if e.complexity.IncomeStatementItem.InterestIncome == nil {
			break
		}

		return e.complexity.IncomeStatementItem.InterestIncome(childComplexity), true

	case "IncomeStatementItem.minorityInterest":
		if e.complexity.IncomeStatementItem.MinorityInterest == nil {
			break
		}

		return e.complexity.IncomeStatementItem.MinorityInterest(childComplexity), true

	case "IncomeStatementItem.netIncome":
		if e.complexity.IncomeStatementItem.NetIncome == nil {
			break
		}

		return e.complexity.IncomeStatementItem.NetIncome(childComplexity), true

	case "IncomeStatementItem.netIncomeApplicableToCommonShares":
		if e.complexity.IncomeStatementItem.NetIncomeApplicableToCommonShares == nil {
			break
		}

		return e.complexity.IncomeStatementItem.NetIncomeApplicableToCommonShares(childComplexity), true

	case "IncomeStatementItem.netIncomeFromContinuingOps":
		if e.complexity.IncomeStatementItem.NetIncomeFromContinuingOps == nil {
			break
		}

		return e.complexity.IncomeStatementItem.NetIncomeFromContinuingOps(childComplexity), true

	case "IncomeStatementItem.netInterestIncome":
		if e.complexity.IncomeStatementItem.NetInterestIncome == nil {
			break
		}

		return e.complexity.IncomeStatementItem.NetInterestIncome(childComplexity), true

	case "IncomeStatementItem.nonOperatingIncomeNetOther":
		if e.complexity.IncomeStatementItem.NonOperatingIncomeNetOther == nil {
			break
		}

		return e.complexity.IncomeStatementItem.NonOperatingIncomeNetOther(childComplexity), true

	case "IncomeStatementItem.nonRecurring":
		if e.complexity.IncomeStatementItem.NonRecurring == nil {
			break
		}

		return e.complexity.IncomeStatementItem.NonRecurring(childComplexity), true

	case "IncomeStatementItem.operatingIncome":
		if e.complexity.IncomeStatementItem.OperatingIncome == nil {
			break
		}

		return e.complexity.IncomeStatementItem.OperatingIncome(childComplexity), true

	case "IncomeStatementItem.otherItems":
		if e.complexity.IncomeStatementItem.OtherItems == nil {
			break
		}

		return e.complexity.IncomeStatementItem.OtherItems(childComplexity), true

	case "IncomeStatementItem.otherOperatingExpenses":
		if e.complexity.IncomeStatementItem.OtherOperatingExpenses == nil {
			break
		}

		return e.complexity.IncomeStatementItem.OtherOperatingExpenses(childComplexity), true

	case "IncomeStatementItem.preferredStockAndOtherAdjustments":
		if e.complexity.IncomeStatementItem.PreferredStockAndOtherAdjustments == nil {
			break
		}

		return e.complexity.IncomeStatementItem.PreferredStockAndOtherAdjustments(childComplexity), true

	case "IncomeStatementItem.reconciledDepreciation":
		if e.complexity.IncomeStatementItem.ReconciledDepreciation == nil {
			break
		}

		return e.complexity.IncomeStatementItem.ReconciledDepreciation(childComplexity), true

	case "IncomeStatementItem.researchDevelopment":
		if e.complexity.IncomeStatementItem.ResearchDevelopment == nil {
			break
		}

		return e.complexity.IncomeStatementItem.ResearchDevelopment(childComplexity), true

	case "IncomeStatementItem.sellingAndMarketingExpenses":
		if e.complexity.IncomeStatementItem.SellingAndMarketingExpenses == nil {
			break
		}

		return e.complexity.IncomeStatementItem.SellingAndMarketingExpenses(childComplexity), true

	case "IncomeStatementItem.sellingGeneralAdministrative":
		if e.complexity.IncomeStatementItem.SellingGeneralAdministrative == nil {
			break
		}

		return e.complexity.IncomeStatementItem.SellingGeneralAdministrative(childComplexity), true

	case "IncomeStatementItem.taxProvision":
		if e.complexity.IncomeStatementItem.TaxProvision == nil {
			break
		}

		return e.complexity.IncomeStatementItem.TaxProvision(childComplexity), true

	case "IncomeStatementItem.totalOperatingExpenses":
		if e.complexity.IncomeStatementItem.TotalOperatingExpenses == nil {
			break
		}

		return e.complexity.IncomeStatementItem.TotalOperatingExpenses(childComplexity), true

	case "IncomeStatementItem.totalOtherIncomeExpenseNet":
		if e.complexity.IncomeStatementItem.TotalOtherIncomeExpenseNet == nil {
			break
		}

		return e.complexity.IncomeStatementItem.TotalOtherIncomeExpenseNet(childComplexity), true

	case "IncomeStatementItem.totalRevenue":
		if e.complexity.IncomeStatementItem.TotalRevenue == nil {
			break
		}

		return e.complexity.IncomeStatementItem.TotalRevenue(childComplexity), true

	case "IncomeStatementItemMapTuple.key":
		if e.complexity.IncomeStatementItemMapTuple.Key == nil {
			break
		}

		return e.complexity.IncomeStatementItemMapTuple.Key(childComplexity), true

	case "IncomeStatementItemMapTuple.value":
		if e.complexity.IncomeStatementItemMapTuple.Value == nil {
			break
		}

		return e.complexity.IncomeStatementItemMapTuple.Value(childComplexity), true

	case "InsiderTransaction.date":
		if e.complexity.InsiderTransaction.Date == nil {
			break
		}

		return e.complexity.InsiderTransaction.Date(childComplexity), true

	case "InsiderTransaction.ownerCik":
		if e.complexity.InsiderTransaction.OwnerCik == nil {
			break
		}

		return e.complexity.InsiderTransaction.OwnerCik(childComplexity), true

	case "InsiderTransaction.ownerName":
		if e.complexity.InsiderTransaction.OwnerName == nil {
			break
		}

		return e.complexity.InsiderTransaction.OwnerName(childComplexity), true

	case "InsiderTransaction.postTransactionAmount":
		if e.complexity.InsiderTransaction.PostTransactionAmount == nil {
			break
		}

		return e.complexity.InsiderTransaction.PostTransactionAmount(childComplexity), true

	case "InsiderTransaction.secLink":
		if e.complexity.InsiderTransaction.SecLink == nil {
			break
		}

		return e.complexity.InsiderTransaction.SecLink(childComplexity), true

	case "InsiderTransaction.transactionAcquiredDisposed":
		if e.complexity.InsiderTransaction.TransactionAcquiredDisposed == nil {
			break
		}

		return e.complexity.InsiderTransaction.TransactionAcquiredDisposed(childComplexity), true

	case "InsiderTransaction.transactionAmount":
		if e.complexity.InsiderTransaction.TransactionAmount == nil {
			break
		}

		return e.complexity.InsiderTransaction.TransactionAmount(childComplexity), true

	case "InsiderTransaction.transactionCode":
		if e.complexity.InsiderTransaction.TransactionCode == nil {
			break
		}

		return e.complexity.InsiderTransaction.TransactionCode(childComplexity), true

	case "InsiderTransaction.transactionDate":
		if e.complexity.InsiderTransaction.TransactionDate == nil {
			break
		}

		return e.complexity.InsiderTransaction.TransactionDate(childComplexity), true

	case "InsiderTransaction.transactionPrice":
		if e.complexity.InsiderTransaction.TransactionPrice == nil {
			break
		}

		return e.complexity.InsiderTransaction.TransactionPrice(childComplexity), true

	case "InsiderTransactionMapTuple.key":
		if e.complexity.InsiderTransactionMapTuple.Key == nil {
			break
		}

		return e.complexity.InsiderTransactionMapTuple.Key(childComplexity), true

	case "InsiderTransactionMapTuple.value":
		if e.complexity.InsiderTransactionMapTuple.Value == nil {
			break
		}

		return e.complexity.InsiderTransactionMapTuple.Value(childComplexity), true

	case "Institution.change":
		if e.complexity.Institution.Change == nil {
			break
		}

		return e.complexity.Institution.Change(childComplexity), true

	case "Institution.change_p":
		if e.complexity.Institution.ChangeP == nil {
			break
		}

		return e.complexity.Institution.ChangeP(childComplexity), true

	case "Institution.currentShares":
		if e.complexity.Institution.CurrentShares == nil {
			break
		}

		return e.complexity.Institution.CurrentShares(childComplexity), true

	case "Institution.date":
		if e.complexity.Institution.Date == nil {
			break
		}

		return e.complexity.Institution.Date(childComplexity), true

	case "Institution.name":
		if e.complexity.Institution.Name == nil {
			break
		}

		return e.complexity.Institution.Name(childComplexity), true

	case "Institution.totalAssets":
		if e.complexity.Institution.TotalAssets == nil {
			break
		}

		return e.complexity.Institution.TotalAssets(childComplexity), true

	case "Institution.totalShares":
		if e.complexity.Institution.TotalShares == nil {
			break
		}

		return e.complexity.Institution.TotalShares(childComplexity), true

	case "InstitutionMapTuple.key":
		if e.complexity.InstitutionMapTuple.Key == nil {
			break
		}

		return e.complexity.InstitutionMapTuple.Key(childComplexity), true

	case "InstitutionMapTuple.value":
		if e.complexity.InstitutionMapTuple.Value == nil {
			break
		}

		return e.complexity.InstitutionMapTuple.Value(childComplexity), true

	case "Listing.Code":
		if e.complexity.Listing.Code == nil {
			break
		}

		return e.complexity.Listing.Code(childComplexity), true

	case "Listing.Exchange":
		if e.complexity.Listing.Exchange == nil {
			break
		}

		return e.complexity.Listing.Exchange(childComplexity), true

	case "Listing.Name":
		if e.complexity.Listing.Name == nil {
			break
		}

		return e.complexity.Listing.Name(childComplexity), true

	case "ListingMap.item_number":
		if e.complexity.ListingMap.ItemNumber == nil {
			break
		}

		return e.complexity.ListingMap.ItemNumber(childComplexity), true

	case "ListingMap.value":
		if e.complexity.ListingMap.Value == nil {
			break
		}

		return e.complexity.ListingMap.Value(childComplexity), true

	case "NumberDividendsByYear.Count":
		if e.complexity.NumberDividendsByYear.Count == nil {
			break
		}

		return e.complexity.NumberDividendsByYear.Count(childComplexity), true

	case "NumberDividendsByYear.Year":
		if e.complexity.NumberDividendsByYear.Year == nil {
			break
		}

		return e.complexity.NumberDividendsByYear.Year(childComplexity), true

	case "NumberDividendsByYearMapTuple.key":
		if e.complexity.NumberDividendsByYearMapTuple.Key == nil {
			break
		}

		return e.complexity.NumberDividendsByYearMapTuple.Key(childComplexity), true

	case "NumberDividendsByYearMapTuple.value":
		if e.complexity.NumberDividendsByYearMapTuple.Value == nil {
			break
		}

		return e.complexity.NumberDividendsByYearMapTuple.Value(childComplexity), true

	case "Officer.Name":
		if e.complexity.Officer.Name == nil {
			break
		}

		return e.complexity.Officer.Name(childComplexity), true

	case "Officer.Title":
		if e.complexity.Officer.Title == nil {
			break
		}

		return e.complexity.Officer.Title(childComplexity), true

	case "Officer.YearBorn":
		if e.complexity.Officer.YearBorn == nil {
			break
		}

		return e.complexity.Officer.YearBorn(childComplexity), true

	case "OfficerMap.item_number":
		if e.complexity.OfficerMap.ItemNumber == nil {
			break
		}

		return e.complexity.OfficerMap.ItemNumber(childComplexity), true

	case "OfficerMap.value":
		if e.complexity.OfficerMap.Value == nil {
			break
		}

		return e.complexity.OfficerMap.Value(childComplexity), true

	case "OutstandingShares.annual":
		if e.complexity.OutstandingShares.Annual == nil {
			break
		}

		return e.complexity.OutstandingShares.Annual(childComplexity), true

	case "OutstandingShares.quarterly":
		if e.complexity.OutstandingShares.Quarterly == nil {
			break
		}

		return e.complexity.OutstandingShares.Quarterly(childComplexity), true

	case "Quarterly.date":
		if e.complexity.Quarterly.Date == nil {
			break
		}

		return e.complexity.Quarterly.Date(childComplexity), true

	case "Quarterly.dateFormatted":
		if e.complexity.Quarterly.DateFormatted == nil {
			break
		}

		return e.complexity.Quarterly.DateFormatted(childComplexity), true

	case "Quarterly.shares":
		if e.complexity.Quarterly.Shares == nil {
			break
		}

		return e.complexity.Quarterly.Shares(childComplexity), true

	case "Quarterly.sharesMln":
		if e.complexity.Quarterly.SharesMln == nil {
			break
		}

		return e.complexity.Quarterly.SharesMln(childComplexity), true

	case "QuarterlyMapTuple.key":
		if e.complexity.QuarterlyMapTuple.Key == nil {
			break
		}

		return e.complexity.QuarterlyMapTuple.Key(childComplexity), true

	case "QuarterlyMapTuple.value":
		if e.complexity.QuarterlyMapTuple.Value == nil {
			break
		}

		return e.complexity.QuarterlyMapTuple.Value(childComplexity), true

	case "Query.getFundamentals":
		if e.complexity.Query.GetFundamentals == nil {
			break
		}

		args, err := ec.field_Query_getFundamentals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetFundamentals(childComplexity, args["ticker"].(*string)), true

	case "SharesStats.PercentInsiders":
		if e.complexity.SharesStats.PercentInsiders == nil {
			break
		}

		return e.complexity.SharesStats.PercentInsiders(childComplexity), true

	case "SharesStats.PercentInstitutions":
		if e.complexity.SharesStats.PercentInstitutions == nil {
			break
		}

		return e.complexity.SharesStats.PercentInstitutions(childComplexity), true

	case "SharesStats.SharesFloat":
		if e.complexity.SharesStats.SharesFloat == nil {
			break
		}

		return e.complexity.SharesStats.SharesFloat(childComplexity), true

	case "SharesStats.SharesOutstanding":
		if e.complexity.SharesStats.SharesOutstanding == nil {
			break
		}

		return e.complexity.SharesStats.SharesOutstanding(childComplexity), true

	case "SharesStats.SharesShort":
		if e.complexity.SharesStats.SharesShort == nil {
			break
		}

		return e.complexity.SharesStats.SharesShort(childComplexity), true

	case "SharesStats.SharesShortPriorMonth":
		if e.complexity.SharesStats.SharesShortPriorMonth == nil {
			break
		}

		return e.complexity.SharesStats.SharesShortPriorMonth(childComplexity), true

	case "SharesStats.ShortPercentFloat":
		if e.complexity.SharesStats.ShortPercentFloat == nil {
			break
		}

		return e.complexity.SharesStats.ShortPercentFloat(childComplexity), true

	case "SharesStats.ShortPercentOutstanding":
		if e.complexity.SharesStats.ShortPercentOutstanding == nil {
			break
		}

		return e.complexity.SharesStats.ShortPercentOutstanding(childComplexity), true

	case "SharesStats.ShortRatio":
		if e.complexity.SharesStats.ShortRatio == nil {
			break
		}

		return e.complexity.SharesStats.ShortRatio(childComplexity), true

	case "SplitsDividends.DividendDate":
		if e.complexity.SplitsDividends.DividendDate == nil {
			break
		}

		return e.complexity.SplitsDividends.DividendDate(childComplexity), true

	case "SplitsDividends.ExDividendDate":
		if e.complexity.SplitsDividends.ExDividendDate == nil {
			break
		}

		return e.complexity.SplitsDividends.ExDividendDate(childComplexity), true

	case "SplitsDividends.ForwardAnnualDividendRate":
		if e.complexity.SplitsDividends.ForwardAnnualDividendRate == nil {
			break
		}

		return e.complexity.SplitsDividends.ForwardAnnualDividendRate(childComplexity), true

	case "SplitsDividends.ForwardAnnualDividendYield":
		if e.complexity.SplitsDividends.ForwardAnnualDividendYield == nil {
			break
		}

		return e.complexity.SplitsDividends.ForwardAnnualDividendYield(childComplexity), true

	case "SplitsDividends.LastSplitDate":
		if e.complexity.SplitsDividends.LastSplitDate == nil {
			break
		}

		return e.complexity.SplitsDividends.LastSplitDate(childComplexity), true

	case "SplitsDividends.LastSplitFactor":
		if e.complexity.SplitsDividends.LastSplitFactor == nil {
			break
		}

		return e.complexity.SplitsDividends.LastSplitFactor(childComplexity), true

	case "SplitsDividends.NumberDividendsByYear":
		if e.complexity.SplitsDividends.NumberDividendsByYear == nil {
			break
		}

		return e.complexity.SplitsDividends.NumberDividendsByYear(childComplexity), true

	case "SplitsDividends.PayoutRatio":
		if e.complexity.SplitsDividends.PayoutRatio == nil {
			break
		}

		return e.complexity.SplitsDividends.PayoutRatio(childComplexity), true

	case "Technicals.Beta":
		if e.complexity.Technicals.Beta == nil {
			break
		}

		return e.complexity.Technicals.Beta(childComplexity), true

	case "Technicals.DayMA200":
		if e.complexity.Technicals.DayMa200 == nil {
			break
		}

		return e.complexity.Technicals.DayMa200(childComplexity), true

	case "Technicals.DayMA50":
		if e.complexity.Technicals.DayMa50 == nil {
			break
		}

		return e.complexity.Technicals.DayMa50(childComplexity), true

	case "Technicals.SharesShort":
		if e.complexity.Technicals.SharesShort == nil {
			break
		}

		return e.complexity.Technicals.SharesShort(childComplexity), true

	case "Technicals.SharesShortPriorMonth":
		if e.complexity.Technicals.SharesShortPriorMonth == nil {
			break
		}

		return e.complexity.Technicals.SharesShortPriorMonth(childComplexity), true

	case "Technicals.ShortPercent":
		if e.complexity.Technicals.ShortPercent == nil {
			break
		}

		return e.complexity.Technicals.ShortPercent(childComplexity), true

	case "Technicals.ShortRatio":
		if e.complexity.Technicals.ShortRatio == nil {
			break
		}

		return e.complexity.Technicals.ShortRatio(childComplexity), true

	case "Technicals.WeekHigh52":
		if e.complexity.Technicals.WeekHigh52 == nil {
			break
		}

		return e.complexity.Technicals.WeekHigh52(childComplexity), true

	case "Technicals.WeekLow52":
		if e.complexity.Technicals.WeekLow52 == nil {
			break
		}

		return e.complexity.Technicals.WeekLow52(childComplexity), true

	case "Trend.date":
		if e.complexity.Trend.Date == nil {
			break
		}

		return e.complexity.Trend.Date(childComplexity), true

	case "Trend.earningsEstimateAvg":
		if e.complexity.Trend.EarningsEstimateAvg == nil {
			break
		}

		return e.complexity.Trend.EarningsEstimateAvg(childComplexity), true

	case "Trend.earningsEstimateGrowth":
		if e.complexity.Trend.EarningsEstimateGrowth == nil {
			break
		}

		return e.complexity.Trend.EarningsEstimateGrowth(childComplexity), true

	case "Trend.earningsEstimateHigh":
		if e.complexity.Trend.EarningsEstimateHigh == nil {
			break
		}

		return e.complexity.Trend.EarningsEstimateHigh(childComplexity), true

	case "Trend.earningsEstimateLow":
		if e.complexity.Trend.EarningsEstimateLow == nil {
			break
		}

		return e.complexity.Trend.EarningsEstimateLow(childComplexity), true

	case "Trend.earningsEstimateNumberOfAnalysts":
		if e.complexity.Trend.EarningsEstimateNumberOfAnalysts == nil {
			break
		}

		return e.complexity.Trend.EarningsEstimateNumberOfAnalysts(childComplexity), true

	case "Trend.earningsEstimateYearAgoEps":
		if e.complexity.Trend.EarningsEstimateYearAgoEps == nil {
			break
		}

		return e.complexity.Trend.EarningsEstimateYearAgoEps(childComplexity), true

	case "Trend.epsRevisionsDownLast30days":
		if e.complexity.Trend.EpsRevisionsDownLast30days == nil {
			break
		}

		return e.complexity.Trend.EpsRevisionsDownLast30days(childComplexity), true

	case "Trend.epsRevisionsDownLast7days":
		if e.complexity.Trend.EpsRevisionsDownLast7days == nil {
			break
		}

		return e.complexity.Trend.EpsRevisionsDownLast7days(childComplexity), true

	case "Trend.epsRevisionsUpLast30days":
		if e.complexity.Trend.EpsRevisionsUpLast30days == nil {
			break
		}

		return e.complexity.Trend.EpsRevisionsUpLast30days(childComplexity), true

	case "Trend.epsRevisionsUpLast7days":
		if e.complexity.Trend.EpsRevisionsUpLast7days == nil {
			break
		}

		return e.complexity.Trend.EpsRevisionsUpLast7days(childComplexity), true

	case "Trend.epsTrend30daysAgo":
		if e.complexity.Trend.EpsTrend30daysAgo == nil {
			break
		}

		return e.complexity.Trend.EpsTrend30daysAgo(childComplexity), true

	case "Trend.epsTrend60daysAgo":
		if e.complexity.Trend.EpsTrend60daysAgo == nil {
			break
		}

		return e.complexity.Trend.EpsTrend60daysAgo(childComplexity), true

	case "Trend.epsTrend7daysAgo":
		if e.complexity.Trend.EpsTrend7daysAgo == nil {
			break
		}

		return e.complexity.Trend.EpsTrend7daysAgo(childComplexity), true

	case "Trend.epsTrend90daysAgo":
		if e.complexity.Trend.EpsTrend90daysAgo == nil {
			break
		}

		return e.complexity.Trend.EpsTrend90daysAgo(childComplexity), true

	case "Trend.epsTrendCurrent":
		if e.complexity.Trend.EpsTrendCurrent == nil {
			break
		}

		return e.complexity.Trend.EpsTrendCurrent(childComplexity), true

	case "Trend.growth":
		if e.complexity.Trend.Growth == nil {
			break
		}

		return e.complexity.Trend.Growth(childComplexity), true

	case "Trend.period":
		if e.complexity.Trend.Period == nil {
			break
		}

		return e.complexity.Trend.Period(childComplexity), true

	case "Trend.revenueEstimateAvg":
		if e.complexity.Trend.RevenueEstimateAvg == nil {
			break
		}

		return e.complexity.Trend.RevenueEstimateAvg(childComplexity), true

	case "Trend.revenueEstimateGrowth":
		if e.complexity.Trend.RevenueEstimateGrowth == nil {
			break
		}

		return e.complexity.Trend.RevenueEstimateGrowth(childComplexity), true

	case "Trend.revenueEstimateHigh":
		if e.complexity.Trend.RevenueEstimateHigh == nil {
			break
		}

		return e.complexity.Trend.RevenueEstimateHigh(childComplexity), true

	case "Trend.revenueEstimateLow":
		if e.complexity.Trend.RevenueEstimateLow == nil {
			break
		}

		return e.complexity.Trend.RevenueEstimateLow(childComplexity), true

	case "Trend.revenueEstimateNumberOfAnalysts":
		if e.complexity.Trend.RevenueEstimateNumberOfAnalysts == nil {
			break
		}

		return e.complexity.Trend.RevenueEstimateNumberOfAnalysts(childComplexity), true

	case "Trend.revenueEstimateYearAgoEps":
		if e.complexity.Trend.RevenueEstimateYearAgoEps == nil {
			break
		}

		return e.complexity.Trend.RevenueEstimateYearAgoEps(childComplexity), true

	case "TrendMapTuple.key":
		if e.complexity.TrendMapTuple.Key == nil {
			break
		}

		return e.complexity.TrendMapTuple.Key(childComplexity), true

	case "TrendMapTuple.value":
		if e.complexity.TrendMapTuple.Value == nil {
			break
		}

		return e.complexity.TrendMapTuple.Value(childComplexity), true

	case "Valuation.EnterpriseValue":
		if e.complexity.Valuation.EnterpriseValue == nil {
			break
		}

		return e.complexity.Valuation.EnterpriseValue(childComplexity), true

	case "Valuation.EnterpriseValueEbitda":
		if e.complexity.Valuation.EnterpriseValueEbitda == nil {
			break
		}

		return e.complexity.Valuation.EnterpriseValueEbitda(childComplexity), true

	case "Valuation.EnterpriseValueRevenue":
		if e.complexity.Valuation.EnterpriseValueRevenue == nil {
			break
		}

		return e.complexity.Valuation.EnterpriseValueRevenue(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "schema.graphqls", Input: `
type Technicals {
	Beta:                  Float 
	WeekHigh52:           Float 
	WeekLow52:            Float 
	DayMA50:              Float
	DayMA200:             Float
	SharesShort:           Int    
	SharesShortPriorMonth: Int     
	ShortRatio:            Float 
	ShortPercent:          Float 
}

type EquityFundamentals {
	General:             General                      
	Highlights:          Highlights                   
	Valuation:           Valuation                    
	SharesStats:         SharesStats                  
	Technicals:          Technicals                   
	SplitsDividends:     SplitsDividends              
	AnalystRatings:      AnalystRatings               
	Holders:             Holders                      
	InsiderTransactions: InsiderTransactionMapTuple 
	ESGScores:           ESGScores                    
	OutstandingShares:   OutstandingShares            
	Earnings:            Earnings                     
	Financials:          Financials                   
}

type Query {
    getFundamentals(ticker: String): EquityFundamentals!
}

type NumberDividendsByYearMapTuple {
    key: String
    value: NumberDividendsByYear    
}

type OfficerMap {
    item_number: String
    value: Officer
}

type ListingMap {
    item_number: String
    value: Listing
}

type IncomeStatementItemMapTuple {
    key: String
    value: IncomeStatementItem
}

type CashFlowItemMapTuple {
    key: String
    value: CashFlowItem
}

type InstitutionMapTuple {
    key: String
    value: Institution    
}

type BalanceSheetItemMapTuple {
    key: String
    value: BalanceSheetItem
}

type InsiderTransactionMapTuple {
    key: String
    value: InsiderTransaction
}

type General {
    Code: String
    Type: String
    Name: String
    Exchange: String
    CurrencyCode: String
    CurrencyName: String
    CurrencySymbol: String
    CountryName: String
    EmployerIdNumber: String
    FiscalYearEnd: String
    InternationalDomestic: String
    Sector: String
    Industry: String
    GicSector: String
    GicGroup: String
    GicIndustry: String
    GicSubIndustry: String
    HomeCategory: String
    IsDelisted: Boolean
    Description: String
    Address: String
    AddressData: AddressData
    Listings: ListingMap
    Officers: OfficerMap
    Phone: String
    FullTimeEmployees: Int
    UpdatedAt: String
}

type AddressData {
    Street: String
    City: String
    State: String
    Country: String
}

type Listing {
    Code: String
    Exchange: String
    Name: String
}

type Officer {
    Name: String
    Title: String
    YearBorn: String
}

type Highlights {
    MarketCapitalization: Int
    MarketCapitalizationMln: Float
    WallStreetTargetPrice: Float
    BookValue: Float
    DividendShare: Float
    DividendYield: Float
    EarningsShare: Float
    MostRecentQuarter: String
    ProfitMargin: Float
}

type Valuation {
    EnterpriseValue: Int
    EnterpriseValueRevenue: Float
    EnterpriseValueEbitda: Float
}

type SharesStats {
    SharesOutstanding: Int
    SharesFloat: Int
    PercentInsiders: Float
    PercentInstitutions: Float
    SharesShort: Float
    SharesShortPriorMonth: Float
    ShortRatio: Float
    ShortPercentOutstanding: Float
    ShortPercentFloat: Float
}

type SplitsDividends {
    ForwardAnnualDividendRate: Float
    ForwardAnnualDividendYield: Float
    PayoutRatio: Float
    DividendDate: String
    ExDividendDate: String
    LastSplitFactor: String
    LastSplitDate: String
    NumberDividendsByYear: [NumberDividendsByYearMapTuple]
}

type NumberDividendsByYear {
    Year: Int
    Count: Int
}

type AnalystRatings {
    Rating: Float
    TargetPrice: Float
    StrongBuy: Int
    Buy: Int
    Hold: Int
    Sell: Int
    StrongSell: Int
}

type Holders {
    Institutions: [InstitutionMapTuple]
    Funds: [InstitutionMapTuple]
}

type Institution {
    name: String
    date: String
    totalShares: Float
    totalAssets: Float
    currentShares: Int
    change: Int
    change_p: Float
}

type InsiderTransaction {
    date: String
    ownerCik: Float
    ownerName: String
    transactionDate: String
    transactionCode: String
    transactionAmount: Int
    transactionPrice: Float
    transactionAcquiredDisposed: String
    postTransactionAmount: Int
    secLink: String
}

type ActivityInvolvementMapTuple {
    key: String
    value: ActivityInvolvement
}

type ESGScores {
    Disclaimer: String
    RatingDate: String
    TotalEsg: Float
    TotalEsgPercentile: Float
    EnvironmentScore: Float
    EnvironmentScorePercentile: Int
    SocialScore: Float
    SocialScorePercentile: Int
    GovernanceScore: Float
    GovernanceScorePercentile: Int
    ControversyLevel: Int
    ActivitiesInvolvement: [ActivityInvolvement]
}

type ActivityInvolvement {
    Activity: String
    Involvement: String
}

type AnnualMapTuple {
    key: String
    value: Annual
}

type QuarterlyMapTuple {
    key: String
    value: Quarterly
}

type OutstandingShares {
    annual: [AnnualMapTuple]
    quarterly: [QuarterlyMapTuple]
}

type Annual {
    date: String
    dateFormatted: String
    sharesMln: String
    shares: Float
}

type Quarterly {
    date: String
    dateFormatted: String
    sharesMln: String
    shares: Float
}

type HistoryMapTuple {
    key: String
    value: History
}

type TrendMapTuple {
    key: String
    value: Trend
}

type AnnualEarningsMapTuple {
    key: String
    value: AnnualEarnings
}

type Earnings {
    History: [HistoryMapTuple]
    Trend: [TrendMapTuple]
    Annual: [AnnualEarningsMapTuple]
}

type History {
    reportDate: String
    date: String
    beforeAfterMarket: String
    currency: String
    epsActual: Float
    epsEstimate: Float
    epsDifference: Float
    surprisePercent: Float
}

type Trend {
    date: String
    period: String
    growth: String
    earningsEstimateAvg: String
    earningsEstimateLow: String
    earningsEstimateHigh: String
    earningsEstimateYearAgoEps: String
    earningsEstimateNumberOfAnalysts: String
    earningsEstimateGrowth: String
    revenueEstimateAvg: String
    revenueEstimateLow: String
    revenueEstimateHigh: String
    revenueEstimateYearAgoEps: Float
    revenueEstimateNumberOfAnalysts: String
    revenueEstimateGrowth: String
    epsTrendCurrent: String
    epsTrend7daysAgo: String
    epsTrend30daysAgo: String
    epsTrend60daysAgo: String
    epsTrend90daysAgo: String
    epsRevisionsUpLast7days: String
    epsRevisionsUpLast30days: String
    epsRevisionsDownLast7days: String
    epsRevisionsDownLast30days: String
}

type AnnualEarnings {
    date: String
    epsActual: Float
}

type Financials {
    Balance_Sheet: BalanceSheet
    Cash_Flow: CashFlow
    Income_Statement: IncomeStatement
}

type BalanceSheet {
    currency_symbol: String
    quarterly: [BalanceSheetItemMapTuple]
    yearly: [BalanceSheetItemMapTuple]
}

type BalanceSheetItem {
    date: String
    filing_date: String
    currency_symbol: String
    totalAssets: String
    intangibleAssets: Float
    earningAssets: Float
    otherCurrentAssets: String
    totalLiab: String
    totalStockholderEquity: String
    deferredLongTermLiab: Float
    otherCurrentLiab: String
    commonStock: String
    retainedEarnings: String
    otherLiab: String
    goodWill: Float
    otherAssets: String
    cash: String
    totalCurrentLiabilities: String
    netDebt: String
    shortTermDebt: String
    shortLongTermDebt: String
    shortLongTermDebtTotal: String
    otherStockholderEquity: String
    propertyPlantEquipment: String
    totalCurrentAssets: String
    longTermInvestments: String
    netTangibleAssets: String
    shortTermInvestments: String
    netReceivables: String
    longTermDebt: String
    inventory: String
    accountsPayable: String
    totalPermanentEquity: Float
    noncontrollingInterestInConsolidatedEntity: Float
    temporaryEquityRedeemableNoncontrollingInterests: Float
    accumulatedOtherComprehensiveIncome: String
    additionalPaidInCapital: Float
    commonStockTotalEquity: String
    preferredStockTotalEquity: Float
    retainedEarningsTotalEquity: String
    treasuryStock: Float
    accumulatedAmortization: Float
    nonCurrrentAssetsOther: String
    deferredLongTermAssetCharges: Float
    nonCurrentAssetsTotal: String
    capitalLeaseObligations: Float
    longTermDebtTotal: String
    nonCurrentLiabilitiesOther: String
    nonCurrentLiabilitiesTotal: String
    negativeGoodwill: Float
    warrants: Float
    preferredStockRedeemable: Float
    capitalSurpluse: Float
    liabilitiesAndStockholdersEquity: String
    cashAndShortTermInvestments: String
    propertyPlantAndEquipmentGross: Float
    propertyPlantAndEquipmentNet: String
    accumulatedDepreciation: Float
    netWorkingCapital: String
    netInvestedCapital: String
    commonStockSharesOutstanding: String
}

type CashFlow {
    currency_symbol: String
    quarterly: [CashFlowItemMapTuple]
    yearly: [CashFlowItemMapTuple]
}

type CashFlowItem {
    date: String
    filing_date: String
    currency_symbol: String
    investments: String
    changeToLiabilities: String
    totalCashflowsFromInvestingActivities: String
    netBorrowings: String
    totalCashFromFinancingActivities: String
    changeToOperatingActivities: String
    netIncome: String
    changeInCash: String
    beginPeriodCashFlow: String
    endPeriodCashFlow: String
    totalCashFromOperatingActivities: String
    depreciation: String
    otherCashflowsFromInvestingActivities: String
    dividendsPaid: String
    changeToInventory: String
    changeToAccountReceivables: String
    salePurchaseOfStock: String
    otherCashflowsFromFinancingActivities: String
    changeToNetincome: String
    capitalExpenditures: String
    changeReceivables: String
    cashFlowsOtherOperating: String
    exchangeRateChanges: Float
    cashAndCashEquivalentsChanges: String
    changeInWorkingCapital: String
    otherNonCashItems: String
    freeCashFlow: String
}


type IncomeStatement {
    currency_symbol: String
    quarterly: [IncomeStatementItemMapTuple]
    yearly: [IncomeStatementItemMapTuple]
}


type IncomeStatementItem {
    date: String
    filing_date: String
    currency_symbol: String
    researchDevelopment: String
    effectOfAccountingCharges: Float
    incomeBeforeTax: String
    minorityInterest: Float
    netIncome: String
    sellingGeneralAdministrative: String
    sellingAndMarketingExpenses: Float
    grossProfit: String
    reconciledDepreciation: String
    ebit: String
    ebitda: String
    depreciationAndAmortization: String
    nonOperatingIncomeNetOther: String
    operatingIncome: String
    otherOperatingExpenses: Float
    interestExpense: Float
    taxProvision: String
    interestIncome: Float
    netInterestIncome: Float
    extraordinaryItems: Float
    nonRecurring: Float
    otherItems: Float
    incomeTaxExpense: String
    totalRevenue: String
    totalOperatingExpenses: String
    costOfRevenue: String
    totalOtherIncomeExpenseNet: String
    discontinuedOperations: Float
    netIncomeFromContinuingOps: String
    netIncomeApplicableToCommonShares: String
    preferredStockAndOtherAdjustments: Float
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getFundamentals_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["ticker"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ticker"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ticker"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ActivityInvolvement_Activity(ctx context.Context, field graphql.CollectedField, obj *model.ActivityInvolvement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityInvolvement_Activity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityInvolvement_Activity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityInvolvement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityInvolvement_Involvement(ctx context.Context, field graphql.CollectedField, obj *model.ActivityInvolvement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityInvolvement_Involvement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Involvement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityInvolvement_Involvement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityInvolvement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityInvolvementMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.ActivityInvolvementMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityInvolvementMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityInvolvementMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityInvolvementMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityInvolvementMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.ActivityInvolvementMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityInvolvementMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActivityInvolvement)
	fc.Result = res
	return ec.marshalOActivityInvolvement2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐActivityInvolvement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityInvolvementMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityInvolvementMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Activity":
				return ec.fieldContext_ActivityInvolvement_Activity(ctx, field)
			case "Involvement":
				return ec.fieldContext_ActivityInvolvement_Involvement(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityInvolvement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddressData_Street(ctx context.Context, field graphql.CollectedField, obj *model.AddressData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddressData_Street(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddressData_Street(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddressData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddressData_City(ctx context.Context, field graphql.CollectedField, obj *model.AddressData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddressData_City(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddressData_City(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddressData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddressData_State(ctx context.Context, field graphql.CollectedField, obj *model.AddressData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddressData_State(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddressData_State(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddressData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddressData_Country(ctx context.Context, field graphql.CollectedField, obj *model.AddressData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddressData_Country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddressData_Country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddressData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalystRatings_Rating(ctx context.Context, field graphql.CollectedField, obj *model.AnalystRatings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalystRatings_Rating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalystRatings_Rating(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalystRatings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalystRatings_TargetPrice(ctx context.Context, field graphql.CollectedField, obj *model.AnalystRatings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalystRatings_TargetPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalystRatings_TargetPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalystRatings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalystRatings_StrongBuy(ctx context.Context, field graphql.CollectedField, obj *model.AnalystRatings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalystRatings_StrongBuy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StrongBuy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalystRatings_StrongBuy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalystRatings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalystRatings_Buy(ctx context.Context, field graphql.CollectedField, obj *model.AnalystRatings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalystRatings_Buy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Buy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalystRatings_Buy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalystRatings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalystRatings_Hold(ctx context.Context, field graphql.CollectedField, obj *model.AnalystRatings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalystRatings_Hold(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalystRatings_Hold(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalystRatings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalystRatings_Sell(ctx context.Context, field graphql.CollectedField, obj *model.AnalystRatings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalystRatings_Sell(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalystRatings_Sell(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalystRatings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalystRatings_StrongSell(ctx context.Context, field graphql.CollectedField, obj *model.AnalystRatings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalystRatings_StrongSell(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StrongSell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalystRatings_StrongSell(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalystRatings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Annual_date(ctx context.Context, field graphql.CollectedField, obj *model.Annual) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Annual_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Annual_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Annual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Annual_dateFormatted(ctx context.Context, field graphql.CollectedField, obj *model.Annual) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Annual_dateFormatted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateFormatted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Annual_dateFormatted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Annual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Annual_sharesMln(ctx context.Context, field graphql.CollectedField, obj *model.Annual) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Annual_sharesMln(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesMln, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Annual_sharesMln(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Annual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Annual_shares(ctx context.Context, field graphql.CollectedField, obj *model.Annual) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Annual_shares(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shares, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Annual_shares(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Annual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnnualEarnings_date(ctx context.Context, field graphql.CollectedField, obj *model.AnnualEarnings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnnualEarnings_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnnualEarnings_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnnualEarnings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnnualEarnings_epsActual(ctx context.Context, field graphql.CollectedField, obj *model.AnnualEarnings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnnualEarnings_epsActual(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsActual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnnualEarnings_epsActual(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnnualEarnings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnnualEarningsMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.AnnualEarningsMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnnualEarningsMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnnualEarningsMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnnualEarningsMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnnualEarningsMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.AnnualEarningsMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnnualEarningsMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnnualEarnings)
	fc.Result = res
	return ec.marshalOAnnualEarnings2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualEarnings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnnualEarningsMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnnualEarningsMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_AnnualEarnings_date(ctx, field)
			case "epsActual":
				return ec.fieldContext_AnnualEarnings_epsActual(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnnualEarnings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnnualMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.AnnualMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnnualMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnnualMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnnualMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnnualMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.AnnualMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnnualMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Annual)
	fc.Result = res
	return ec.marshalOAnnual2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnual(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnnualMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnnualMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_Annual_date(ctx, field)
			case "dateFormatted":
				return ec.fieldContext_Annual_dateFormatted(ctx, field)
			case "sharesMln":
				return ec.fieldContext_Annual_sharesMln(ctx, field)
			case "shares":
				return ec.fieldContext_Annual_shares(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Annual", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheet_currency_symbol(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheet_currency_symbol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencySymbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheet_currency_symbol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheet_quarterly(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheet_quarterly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quarterly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BalanceSheetItemMapTuple)
	fc.Result = res
	return ec.marshalOBalanceSheetItemMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐBalanceSheetItemMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheet_quarterly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_BalanceSheetItemMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_BalanceSheetItemMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BalanceSheetItemMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheet_yearly(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheet_yearly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Yearly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BalanceSheetItemMapTuple)
	fc.Result = res
	return ec.marshalOBalanceSheetItemMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐBalanceSheetItemMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheet_yearly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_BalanceSheetItemMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_BalanceSheetItemMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BalanceSheetItemMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_date(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_filing_date(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_filing_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_filing_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_currency_symbol(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_currency_symbol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencySymbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_currency_symbol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_totalAssets(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_totalAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_totalAssets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_intangibleAssets(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_intangibleAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntangibleAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_intangibleAssets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_earningAssets(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_earningAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EarningAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_earningAssets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_otherCurrentAssets(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_otherCurrentAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherCurrentAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_otherCurrentAssets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_totalLiab(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_totalLiab(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalLiab, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_totalLiab(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_totalStockholderEquity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_totalStockholderEquity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalStockholderEquity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_totalStockholderEquity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_deferredLongTermLiab(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_deferredLongTermLiab(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeferredLongTermLiab, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_deferredLongTermLiab(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_otherCurrentLiab(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_otherCurrentLiab(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherCurrentLiab, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_otherCurrentLiab(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_commonStock(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_commonStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_commonStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_retainedEarnings(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_retainedEarnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetainedEarnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_retainedEarnings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_otherLiab(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_otherLiab(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherLiab, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_otherLiab(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_goodWill(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_goodWill(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GoodWill, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_goodWill(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_otherAssets(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_otherAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_otherAssets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_cash(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_cash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_cash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_totalCurrentLiabilities(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_totalCurrentLiabilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCurrentLiabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_totalCurrentLiabilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_netDebt(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_netDebt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetDebt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_netDebt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_shortTermDebt(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_shortTermDebt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortTermDebt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_shortTermDebt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_shortLongTermDebt(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_shortLongTermDebt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortLongTermDebt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_shortLongTermDebt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_shortLongTermDebtTotal(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_shortLongTermDebtTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortLongTermDebtTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_shortLongTermDebtTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_otherStockholderEquity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_otherStockholderEquity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherStockholderEquity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_otherStockholderEquity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_propertyPlantEquipment(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_propertyPlantEquipment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PropertyPlantEquipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_propertyPlantEquipment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_totalCurrentAssets(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_totalCurrentAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCurrentAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_totalCurrentAssets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_longTermInvestments(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_longTermInvestments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LongTermInvestments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_longTermInvestments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_netTangibleAssets(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_netTangibleAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetTangibleAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_netTangibleAssets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_shortTermInvestments(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_shortTermInvestments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortTermInvestments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_shortTermInvestments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_netReceivables(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_netReceivables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetReceivables, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_netReceivables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_longTermDebt(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_longTermDebt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LongTermDebt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_longTermDebt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_inventory(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_inventory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_inventory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_accountsPayable(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_accountsPayable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountsPayable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_accountsPayable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_totalPermanentEquity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_totalPermanentEquity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPermanentEquity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_totalPermanentEquity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_noncontrollingInterestInConsolidatedEntity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_noncontrollingInterestInConsolidatedEntity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoncontrollingInterestInConsolidatedEntity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_noncontrollingInterestInConsolidatedEntity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_temporaryEquityRedeemableNoncontrollingInterests(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_temporaryEquityRedeemableNoncontrollingInterests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryEquityRedeemableNoncontrollingInterests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_temporaryEquityRedeemableNoncontrollingInterests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_accumulatedOtherComprehensiveIncome(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_accumulatedOtherComprehensiveIncome(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulatedOtherComprehensiveIncome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_accumulatedOtherComprehensiveIncome(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_additionalPaidInCapital(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_additionalPaidInCapital(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalPaidInCapital, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_additionalPaidInCapital(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_commonStockTotalEquity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_commonStockTotalEquity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonStockTotalEquity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_commonStockTotalEquity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_preferredStockTotalEquity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_preferredStockTotalEquity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreferredStockTotalEquity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_preferredStockTotalEquity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_retainedEarningsTotalEquity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_retainedEarningsTotalEquity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetainedEarningsTotalEquity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_retainedEarningsTotalEquity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_treasuryStock(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_treasuryStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreasuryStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_treasuryStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_accumulatedAmortization(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_accumulatedAmortization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulatedAmortization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_accumulatedAmortization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_nonCurrrentAssetsOther(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_nonCurrrentAssetsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonCurrrentAssetsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_nonCurrrentAssetsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_deferredLongTermAssetCharges(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_deferredLongTermAssetCharges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeferredLongTermAssetCharges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_deferredLongTermAssetCharges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_nonCurrentAssetsTotal(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_nonCurrentAssetsTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonCurrentAssetsTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_nonCurrentAssetsTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_capitalLeaseObligations(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_capitalLeaseObligations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CapitalLeaseObligations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_capitalLeaseObligations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_longTermDebtTotal(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_longTermDebtTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LongTermDebtTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_longTermDebtTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_nonCurrentLiabilitiesOther(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_nonCurrentLiabilitiesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonCurrentLiabilitiesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_nonCurrentLiabilitiesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_nonCurrentLiabilitiesTotal(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_nonCurrentLiabilitiesTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonCurrentLiabilitiesTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_nonCurrentLiabilitiesTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_negativeGoodwill(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_negativeGoodwill(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NegativeGoodwill, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_negativeGoodwill(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_warrants(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_warrants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warrants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_warrants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_preferredStockRedeemable(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_preferredStockRedeemable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreferredStockRedeemable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_preferredStockRedeemable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_capitalSurpluse(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_capitalSurpluse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CapitalSurpluse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_capitalSurpluse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_liabilitiesAndStockholdersEquity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_liabilitiesAndStockholdersEquity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LiabilitiesAndStockholdersEquity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_liabilitiesAndStockholdersEquity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_cashAndShortTermInvestments(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_cashAndShortTermInvestments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CashAndShortTermInvestments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_cashAndShortTermInvestments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_propertyPlantAndEquipmentGross(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_propertyPlantAndEquipmentGross(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PropertyPlantAndEquipmentGross, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_propertyPlantAndEquipmentGross(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_propertyPlantAndEquipmentNet(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_propertyPlantAndEquipmentNet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PropertyPlantAndEquipmentNet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_propertyPlantAndEquipmentNet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_accumulatedDepreciation(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_accumulatedDepreciation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulatedDepreciation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_accumulatedDepreciation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_netWorkingCapital(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_netWorkingCapital(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetWorkingCapital, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_netWorkingCapital(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_netInvestedCapital(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_netInvestedCapital(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetInvestedCapital, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_netInvestedCapital(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItem_commonStockSharesOutstanding(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItem_commonStockSharesOutstanding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonStockSharesOutstanding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItem_commonStockSharesOutstanding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItemMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItemMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItemMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItemMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItemMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetItemMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetItemMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetItemMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BalanceSheetItem)
	fc.Result = res
	return ec.marshalOBalanceSheetItem2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐBalanceSheetItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetItemMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetItemMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_BalanceSheetItem_date(ctx, field)
			case "filing_date":
				return ec.fieldContext_BalanceSheetItem_filing_date(ctx, field)
			case "currency_symbol":
				return ec.fieldContext_BalanceSheetItem_currency_symbol(ctx, field)
			case "totalAssets":
				return ec.fieldContext_BalanceSheetItem_totalAssets(ctx, field)
			case "intangibleAssets":
				return ec.fieldContext_BalanceSheetItem_intangibleAssets(ctx, field)
			case "earningAssets":
				return ec.fieldContext_BalanceSheetItem_earningAssets(ctx, field)
			case "otherCurrentAssets":
				return ec.fieldContext_BalanceSheetItem_otherCurrentAssets(ctx, field)
			case "totalLiab":
				return ec.fieldContext_BalanceSheetItem_totalLiab(ctx, field)
			case "totalStockholderEquity":
				return ec.fieldContext_BalanceSheetItem_totalStockholderEquity(ctx, field)
			case "deferredLongTermLiab":
				return ec.fieldContext_BalanceSheetItem_deferredLongTermLiab(ctx, field)
			case "otherCurrentLiab":
				return ec.fieldContext_BalanceSheetItem_otherCurrentLiab(ctx, field)
			case "commonStock":
				return ec.fieldContext_BalanceSheetItem_commonStock(ctx, field)
			case "retainedEarnings":
				return ec.fieldContext_BalanceSheetItem_retainedEarnings(ctx, field)
			case "otherLiab":
				return ec.fieldContext_BalanceSheetItem_otherLiab(ctx, field)
			case "goodWill":
				return ec.fieldContext_BalanceSheetItem_goodWill(ctx, field)
			case "otherAssets":
				return ec.fieldContext_BalanceSheetItem_otherAssets(ctx, field)
			case "cash":
				return ec.fieldContext_BalanceSheetItem_cash(ctx, field)
			case "totalCurrentLiabilities":
				return ec.fieldContext_BalanceSheetItem_totalCurrentLiabilities(ctx, field)
			case "netDebt":
				return ec.fieldContext_BalanceSheetItem_netDebt(ctx, field)
			case "shortTermDebt":
				return ec.fieldContext_BalanceSheetItem_shortTermDebt(ctx, field)
			case "shortLongTermDebt":
				return ec.fieldContext_BalanceSheetItem_shortLongTermDebt(ctx, field)
			case "shortLongTermDebtTotal":
				return ec.fieldContext_BalanceSheetItem_shortLongTermDebtTotal(ctx, field)
			case "otherStockholderEquity":
				return ec.fieldContext_BalanceSheetItem_otherStockholderEquity(ctx, field)
			case "propertyPlantEquipment":
				return ec.fieldContext_BalanceSheetItem_propertyPlantEquipment(ctx, field)
			case "totalCurrentAssets":
				return ec.fieldContext_BalanceSheetItem_totalCurrentAssets(ctx, field)
			case "longTermInvestments":
				return ec.fieldContext_BalanceSheetItem_longTermInvestments(ctx, field)
			case "netTangibleAssets":
				return ec.fieldContext_BalanceSheetItem_netTangibleAssets(ctx, field)
			case "shortTermInvestments":
				return ec.fieldContext_BalanceSheetItem_shortTermInvestments(ctx, field)
			case "netReceivables":
				return ec.fieldContext_BalanceSheetItem_netReceivables(ctx, field)
			case "longTermDebt":
				return ec.fieldContext_BalanceSheetItem_longTermDebt(ctx, field)
			case "inventory":
				return ec.fieldContext_BalanceSheetItem_inventory(ctx, field)
			case "accountsPayable":
				return ec.fieldContext_BalanceSheetItem_accountsPayable(ctx, field)
			case "totalPermanentEquity":
				return ec.fieldContext_BalanceSheetItem_totalPermanentEquity(ctx, field)
			case "noncontrollingInterestInConsolidatedEntity":
				return ec.fieldContext_BalanceSheetItem_noncontrollingInterestInConsolidatedEntity(ctx, field)
			case "temporaryEquityRedeemableNoncontrollingInterests":
				return ec.fieldContext_BalanceSheetItem_temporaryEquityRedeemableNoncontrollingInterests(ctx, field)
			case "accumulatedOtherComprehensiveIncome":
				return ec.fieldContext_BalanceSheetItem_accumulatedOtherComprehensiveIncome(ctx, field)
			case "additionalPaidInCapital":
				return ec.fieldContext_BalanceSheetItem_additionalPaidInCapital(ctx, field)
			case "commonStockTotalEquity":
				return ec.fieldContext_BalanceSheetItem_commonStockTotalEquity(ctx, field)
			case "preferredStockTotalEquity":
				return ec.fieldContext_BalanceSheetItem_preferredStockTotalEquity(ctx, field)
			case "retainedEarningsTotalEquity":
				return ec.fieldContext_BalanceSheetItem_retainedEarningsTotalEquity(ctx, field)
			case "treasuryStock":
				return ec.fieldContext_BalanceSheetItem_treasuryStock(ctx, field)
			case "accumulatedAmortization":
				return ec.fieldContext_BalanceSheetItem_accumulatedAmortization(ctx, field)
			case "nonCurrrentAssetsOther":
				return ec.fieldContext_BalanceSheetItem_nonCurrrentAssetsOther(ctx, field)
			case "deferredLongTermAssetCharges":
				return ec.fieldContext_BalanceSheetItem_deferredLongTermAssetCharges(ctx, field)
			case "nonCurrentAssetsTotal":
				return ec.fieldContext_BalanceSheetItem_nonCurrentAssetsTotal(ctx, field)
			case "capitalLeaseObligations":
				return ec.fieldContext_BalanceSheetItem_capitalLeaseObligations(ctx, field)
			case "longTermDebtTotal":
				return ec.fieldContext_BalanceSheetItem_longTermDebtTotal(ctx, field)
			case "nonCurrentLiabilitiesOther":
				return ec.fieldContext_BalanceSheetItem_nonCurrentLiabilitiesOther(ctx, field)
			case "nonCurrentLiabilitiesTotal":
				return ec.fieldContext_BalanceSheetItem_nonCurrentLiabilitiesTotal(ctx, field)
			case "negativeGoodwill":
				return ec.fieldContext_BalanceSheetItem_negativeGoodwill(ctx, field)
			case "warrants":
				return ec.fieldContext_BalanceSheetItem_warrants(ctx, field)
			case "preferredStockRedeemable":
				return ec.fieldContext_BalanceSheetItem_preferredStockRedeemable(ctx, field)
			case "capitalSurpluse":
				return ec.fieldContext_BalanceSheetItem_capitalSurpluse(ctx, field)
			case "liabilitiesAndStockholdersEquity":
				return ec.fieldContext_BalanceSheetItem_liabilitiesAndStockholdersEquity(ctx, field)
			case "cashAndShortTermInvestments":
				return ec.fieldContext_BalanceSheetItem_cashAndShortTermInvestments(ctx, field)
			case "propertyPlantAndEquipmentGross":
				return ec.fieldContext_BalanceSheetItem_propertyPlantAndEquipmentGross(ctx, field)
			case "propertyPlantAndEquipmentNet":
				return ec.fieldContext_BalanceSheetItem_propertyPlantAndEquipmentNet(ctx, field)
			case "accumulatedDepreciation":
				return ec.fieldContext_BalanceSheetItem_accumulatedDepreciation(ctx, field)
			case "netWorkingCapital":
				return ec.fieldContext_BalanceSheetItem_netWorkingCapital(ctx, field)
			case "netInvestedCapital":
				return ec.fieldContext_BalanceSheetItem_netInvestedCapital(ctx, field)
			case "commonStockSharesOutstanding":
				return ec.fieldContext_BalanceSheetItem_commonStockSharesOutstanding(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BalanceSheetItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlow_currency_symbol(ctx context.Context, field graphql.CollectedField, obj *model.CashFlow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlow_currency_symbol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencySymbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlow_currency_symbol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlow_quarterly(ctx context.Context, field graphql.CollectedField, obj *model.CashFlow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlow_quarterly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quarterly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CashFlowItemMapTuple)
	fc.Result = res
	return ec.marshalOCashFlowItemMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐCashFlowItemMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlow_quarterly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_CashFlowItemMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_CashFlowItemMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CashFlowItemMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlow_yearly(ctx context.Context, field graphql.CollectedField, obj *model.CashFlow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlow_yearly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Yearly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CashFlowItemMapTuple)
	fc.Result = res
	return ec.marshalOCashFlowItemMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐCashFlowItemMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlow_yearly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_CashFlowItemMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_CashFlowItemMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CashFlowItemMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_date(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_filing_date(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_filing_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_filing_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_currency_symbol(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_currency_symbol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencySymbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_currency_symbol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_investments(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_investments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Investments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_investments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_changeToLiabilities(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_changeToLiabilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeToLiabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_changeToLiabilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_totalCashflowsFromInvestingActivities(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_totalCashflowsFromInvestingActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCashflowsFromInvestingActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_totalCashflowsFromInvestingActivities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_netBorrowings(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_netBorrowings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetBorrowings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_netBorrowings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_totalCashFromFinancingActivities(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_totalCashFromFinancingActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCashFromFinancingActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_totalCashFromFinancingActivities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_changeToOperatingActivities(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_changeToOperatingActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeToOperatingActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_changeToOperatingActivities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_netIncome(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_netIncome(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetIncome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_netIncome(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_changeInCash(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_changeInCash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeInCash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_changeInCash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_beginPeriodCashFlow(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_beginPeriodCashFlow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeginPeriodCashFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_beginPeriodCashFlow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_endPeriodCashFlow(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_endPeriodCashFlow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPeriodCashFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_endPeriodCashFlow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_totalCashFromOperatingActivities(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_totalCashFromOperatingActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCashFromOperatingActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_totalCashFromOperatingActivities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_depreciation(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_depreciation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Depreciation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_depreciation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_otherCashflowsFromInvestingActivities(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_otherCashflowsFromInvestingActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherCashflowsFromInvestingActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_otherCashflowsFromInvestingActivities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_dividendsPaid(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_dividendsPaid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DividendsPaid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_dividendsPaid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_changeToInventory(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_changeToInventory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeToInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_changeToInventory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_changeToAccountReceivables(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_changeToAccountReceivables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeToAccountReceivables, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_changeToAccountReceivables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_salePurchaseOfStock(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_salePurchaseOfStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalePurchaseOfStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_salePurchaseOfStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_otherCashflowsFromFinancingActivities(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_otherCashflowsFromFinancingActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherCashflowsFromFinancingActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_otherCashflowsFromFinancingActivities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_changeToNetincome(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_changeToNetincome(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeToNetincome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_changeToNetincome(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_capitalExpenditures(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_capitalExpenditures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CapitalExpenditures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_capitalExpenditures(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_changeReceivables(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_changeReceivables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeReceivables, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_changeReceivables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_cashFlowsOtherOperating(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_cashFlowsOtherOperating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CashFlowsOtherOperating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_cashFlowsOtherOperating(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_exchangeRateChanges(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_exchangeRateChanges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeRateChanges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_exchangeRateChanges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_cashAndCashEquivalentsChanges(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_cashAndCashEquivalentsChanges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CashAndCashEquivalentsChanges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_cashAndCashEquivalentsChanges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_changeInWorkingCapital(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_changeInWorkingCapital(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeInWorkingCapital, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_changeInWorkingCapital(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_otherNonCashItems(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_otherNonCashItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherNonCashItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_otherNonCashItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItem_freeCashFlow(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItem_freeCashFlow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreeCashFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItem_freeCashFlow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItemMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItemMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItemMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItemMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItemMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashFlowItemMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.CashFlowItemMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashFlowItemMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CashFlowItem)
	fc.Result = res
	return ec.marshalOCashFlowItem2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐCashFlowItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashFlowItemMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashFlowItemMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_CashFlowItem_date(ctx, field)
			case "filing_date":
				return ec.fieldContext_CashFlowItem_filing_date(ctx, field)
			case "currency_symbol":
				return ec.fieldContext_CashFlowItem_currency_symbol(ctx, field)
			case "investments":
				return ec.fieldContext_CashFlowItem_investments(ctx, field)
			case "changeToLiabilities":
				return ec.fieldContext_CashFlowItem_changeToLiabilities(ctx, field)
			case "totalCashflowsFromInvestingActivities":
				return ec.fieldContext_CashFlowItem_totalCashflowsFromInvestingActivities(ctx, field)
			case "netBorrowings":
				return ec.fieldContext_CashFlowItem_netBorrowings(ctx, field)
			case "totalCashFromFinancingActivities":
				return ec.fieldContext_CashFlowItem_totalCashFromFinancingActivities(ctx, field)
			case "changeToOperatingActivities":
				return ec.fieldContext_CashFlowItem_changeToOperatingActivities(ctx, field)
			case "netIncome":
				return ec.fieldContext_CashFlowItem_netIncome(ctx, field)
			case "changeInCash":
				return ec.fieldContext_CashFlowItem_changeInCash(ctx, field)
			case "beginPeriodCashFlow":
				return ec.fieldContext_CashFlowItem_beginPeriodCashFlow(ctx, field)
			case "endPeriodCashFlow":
				return ec.fieldContext_CashFlowItem_endPeriodCashFlow(ctx, field)
			case "totalCashFromOperatingActivities":
				return ec.fieldContext_CashFlowItem_totalCashFromOperatingActivities(ctx, field)
			case "depreciation":
				return ec.fieldContext_CashFlowItem_depreciation(ctx, field)
			case "otherCashflowsFromInvestingActivities":
				return ec.fieldContext_CashFlowItem_otherCashflowsFromInvestingActivities(ctx, field)
			case "dividendsPaid":
				return ec.fieldContext_CashFlowItem_dividendsPaid(ctx, field)
			case "changeToInventory":
				return ec.fieldContext_CashFlowItem_changeToInventory(ctx, field)
			case "changeToAccountReceivables":
				return ec.fieldContext_CashFlowItem_changeToAccountReceivables(ctx, field)
			case "salePurchaseOfStock":
				return ec.fieldContext_CashFlowItem_salePurchaseOfStock(ctx, field)
			case "otherCashflowsFromFinancingActivities":
				return ec.fieldContext_CashFlowItem_otherCashflowsFromFinancingActivities(ctx, field)
			case "changeToNetincome":
				return ec.fieldContext_CashFlowItem_changeToNetincome(ctx, field)
			case "capitalExpenditures":
				return ec.fieldContext_CashFlowItem_capitalExpenditures(ctx, field)
			case "changeReceivables":
				return ec.fieldContext_CashFlowItem_changeReceivables(ctx, field)
			case "cashFlowsOtherOperating":
				return ec.fieldContext_CashFlowItem_cashFlowsOtherOperating(ctx, field)
			case "exchangeRateChanges":
				return ec.fieldContext_CashFlowItem_exchangeRateChanges(ctx, field)
			case "cashAndCashEquivalentsChanges":
				return ec.fieldContext_CashFlowItem_cashAndCashEquivalentsChanges(ctx, field)
			case "changeInWorkingCapital":
				return ec.fieldContext_CashFlowItem_changeInWorkingCapital(ctx, field)
			case "otherNonCashItems":
				return ec.fieldContext_CashFlowItem_otherNonCashItems(ctx, field)
			case "freeCashFlow":
				return ec.fieldContext_CashFlowItem_freeCashFlow(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CashFlowItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_Disclaimer(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_Disclaimer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Disclaimer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_Disclaimer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_RatingDate(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_RatingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_RatingDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_TotalEsg(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_TotalEsg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalEsg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_TotalEsg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_TotalEsgPercentile(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_TotalEsgPercentile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalEsgPercentile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_TotalEsgPercentile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_EnvironmentScore(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_EnvironmentScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvironmentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_EnvironmentScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_EnvironmentScorePercentile(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_EnvironmentScorePercentile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvironmentScorePercentile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_EnvironmentScorePercentile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_SocialScore(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_SocialScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_SocialScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_SocialScorePercentile(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_SocialScorePercentile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialScorePercentile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_SocialScorePercentile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_GovernanceScore(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_GovernanceScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GovernanceScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_GovernanceScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_GovernanceScorePercentile(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_GovernanceScorePercentile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GovernanceScorePercentile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_GovernanceScorePercentile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_ControversyLevel(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_ControversyLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControversyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_ControversyLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESGScores_ActivitiesInvolvement(ctx context.Context, field graphql.CollectedField, obj *model.ESGScores) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESGScores_ActivitiesInvolvement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivitiesInvolvement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ActivityInvolvement)
	fc.Result = res
	return ec.marshalOActivityInvolvement2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐActivityInvolvement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESGScores_ActivitiesInvolvement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESGScores",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Activity":
				return ec.fieldContext_ActivityInvolvement_Activity(ctx, field)
			case "Involvement":
				return ec.fieldContext_ActivityInvolvement_Involvement(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityInvolvement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Earnings_History(ctx context.Context, field graphql.CollectedField, obj *model.Earnings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Earnings_History(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.History, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.HistoryMapTuple)
	fc.Result = res
	return ec.marshalOHistoryMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHistoryMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Earnings_History(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Earnings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_HistoryMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_HistoryMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HistoryMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Earnings_Trend(ctx context.Context, field graphql.CollectedField, obj *model.Earnings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Earnings_Trend(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TrendMapTuple)
	fc.Result = res
	return ec.marshalOTrendMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐTrendMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Earnings_Trend(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Earnings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_TrendMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_TrendMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrendMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Earnings_Annual(ctx context.Context, field graphql.CollectedField, obj *model.Earnings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Earnings_Annual(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AnnualEarningsMapTuple)
	fc.Result = res
	return ec.marshalOAnnualEarningsMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualEarningsMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Earnings_Annual(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Earnings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_AnnualEarningsMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_AnnualEarningsMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnnualEarningsMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_General(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_General(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.General, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.General)
	fc.Result = res
	return ec.marshalOGeneral2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐGeneral(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_General(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_General_Code(ctx, field)
			case "Type":
				return ec.fieldContext_General_Type(ctx, field)
			case "Name":
				return ec.fieldContext_General_Name(ctx, field)
			case "Exchange":
				return ec.fieldContext_General_Exchange(ctx, field)
			case "CurrencyCode":
				return ec.fieldContext_General_CurrencyCode(ctx, field)
			case "CurrencyName":
				return ec.fieldContext_General_CurrencyName(ctx, field)
			case "CurrencySymbol":
				return ec.fieldContext_General_CurrencySymbol(ctx, field)
			case "CountryName":
				return ec.fieldContext_General_CountryName(ctx, field)
			case "EmployerIdNumber":
				return ec.fieldContext_General_EmployerIdNumber(ctx, field)
			case "FiscalYearEnd":
				return ec.fieldContext_General_FiscalYearEnd(ctx, field)
			case "InternationalDomestic":
				return ec.fieldContext_General_InternationalDomestic(ctx, field)
			case "Sector":
				return ec.fieldContext_General_Sector(ctx, field)
			case "Industry":
				return ec.fieldContext_General_Industry(ctx, field)
			case "GicSector":
				return ec.fieldContext_General_GicSector(ctx, field)
			case "GicGroup":
				return ec.fieldContext_General_GicGroup(ctx, field)
			case "GicIndustry":
				return ec.fieldContext_General_GicIndustry(ctx, field)
			case "GicSubIndustry":
				return ec.fieldContext_General_GicSubIndustry(ctx, field)
			case "HomeCategory":
				return ec.fieldContext_General_HomeCategory(ctx, field)
			case "IsDelisted":
				return ec.fieldContext_General_IsDelisted(ctx, field)
			case "Description":
				return ec.fieldContext_General_Description(ctx, field)
			case "Address":
				return ec.fieldContext_General_Address(ctx, field)
			case "AddressData":
				return ec.fieldContext_General_AddressData(ctx, field)
			case "Listings":
				return ec.fieldContext_General_Listings(ctx, field)
			case "Officers":
				return ec.fieldContext_General_Officers(ctx, field)
			case "Phone":
				return ec.fieldContext_General_Phone(ctx, field)
			case "FullTimeEmployees":
				return ec.fieldContext_General_FullTimeEmployees(ctx, field)
			case "UpdatedAt":
				return ec.fieldContext_General_UpdatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type General", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_Highlights(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_Highlights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Highlights, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Highlights)
	fc.Result = res
	return ec.marshalOHighlights2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHighlights(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_Highlights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "MarketCapitalization":
				return ec.fieldContext_Highlights_MarketCapitalization(ctx, field)
			case "MarketCapitalizationMln":
				return ec.fieldContext_Highlights_MarketCapitalizationMln(ctx, field)
			case "WallStreetTargetPrice":
				return ec.fieldContext_Highlights_WallStreetTargetPrice(ctx, field)
			case "BookValue":
				return ec.fieldContext_Highlights_BookValue(ctx, field)
			case "DividendShare":
				return ec.fieldContext_Highlights_DividendShare(ctx, field)
			case "DividendYield":
				return ec.fieldContext_Highlights_DividendYield(ctx, field)
			case "EarningsShare":
				return ec.fieldContext_Highlights_EarningsShare(ctx, field)
			case "MostRecentQuarter":
				return ec.fieldContext_Highlights_MostRecentQuarter(ctx, field)
			case "ProfitMargin":
				return ec.fieldContext_Highlights_ProfitMargin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Highlights", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_Valuation(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_Valuation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Valuation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Valuation)
	fc.Result = res
	return ec.marshalOValuation2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐValuation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_Valuation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "EnterpriseValue":
				return ec.fieldContext_Valuation_EnterpriseValue(ctx, field)
			case "EnterpriseValueRevenue":
				return ec.fieldContext_Valuation_EnterpriseValueRevenue(ctx, field)
			case "EnterpriseValueEbitda":
				return ec.fieldContext_Valuation_EnterpriseValueEbitda(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Valuation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_SharesStats(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_SharesStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesStats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SharesStats)
	fc.Result = res
	return ec.marshalOSharesStats2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐSharesStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_SharesStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "SharesOutstanding":
				return ec.fieldContext_SharesStats_SharesOutstanding(ctx, field)
			case "SharesFloat":
				return ec.fieldContext_SharesStats_SharesFloat(ctx, field)
			case "PercentInsiders":
				return ec.fieldContext_SharesStats_PercentInsiders(ctx, field)
			case "PercentInstitutions":
				return ec.fieldContext_SharesStats_PercentInstitutions(ctx, field)
			case "SharesShort":
				return ec.fieldContext_SharesStats_SharesShort(ctx, field)
			case "SharesShortPriorMonth":
				return ec.fieldContext_SharesStats_SharesShortPriorMonth(ctx, field)
			case "ShortRatio":
				return ec.fieldContext_SharesStats_ShortRatio(ctx, field)
			case "ShortPercentOutstanding":
				return ec.fieldContext_SharesStats_ShortPercentOutstanding(ctx, field)
			case "ShortPercentFloat":
				return ec.fieldContext_SharesStats_ShortPercentFloat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SharesStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_Technicals(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_Technicals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Technicals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Technicals)
	fc.Result = res
	return ec.marshalOTechnicals2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐTechnicals(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_Technicals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Beta":
				return ec.fieldContext_Technicals_Beta(ctx, field)
			case "WeekHigh52":
				return ec.fieldContext_Technicals_WeekHigh52(ctx, field)
			case "WeekLow52":
				return ec.fieldContext_Technicals_WeekLow52(ctx, field)
			case "DayMA50":
				return ec.fieldContext_Technicals_DayMA50(ctx, field)
			case "DayMA200":
				return ec.fieldContext_Technicals_DayMA200(ctx, field)
			case "SharesShort":
				return ec.fieldContext_Technicals_SharesShort(ctx, field)
			case "SharesShortPriorMonth":
				return ec.fieldContext_Technicals_SharesShortPriorMonth(ctx, field)
			case "ShortRatio":
				return ec.fieldContext_Technicals_ShortRatio(ctx, field)
			case "ShortPercent":
				return ec.fieldContext_Technicals_ShortPercent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Technicals", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_SplitsDividends(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_SplitsDividends(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SplitsDividends, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SplitsDividends)
	fc.Result = res
	return ec.marshalOSplitsDividends2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐSplitsDividends(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_SplitsDividends(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ForwardAnnualDividendRate":
				return ec.fieldContext_SplitsDividends_ForwardAnnualDividendRate(ctx, field)
			case "ForwardAnnualDividendYield":
				return ec.fieldContext_SplitsDividends_ForwardAnnualDividendYield(ctx, field)
			case "PayoutRatio":
				return ec.fieldContext_SplitsDividends_PayoutRatio(ctx, field)
			case "DividendDate":
				return ec.fieldContext_SplitsDividends_DividendDate(ctx, field)
			case "ExDividendDate":
				return ec.fieldContext_SplitsDividends_ExDividendDate(ctx, field)
			case "LastSplitFactor":
				return ec.fieldContext_SplitsDividends_LastSplitFactor(ctx, field)
			case "LastSplitDate":
				return ec.fieldContext_SplitsDividends_LastSplitDate(ctx, field)
			case "NumberDividendsByYear":
				return ec.fieldContext_SplitsDividends_NumberDividendsByYear(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SplitsDividends", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_AnalystRatings(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_AnalystRatings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnalystRatings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnalystRatings)
	fc.Result = res
	return ec.marshalOAnalystRatings2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnalystRatings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_AnalystRatings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Rating":
				return ec.fieldContext_AnalystRatings_Rating(ctx, field)
			case "TargetPrice":
				return ec.fieldContext_AnalystRatings_TargetPrice(ctx, field)
			case "StrongBuy":
				return ec.fieldContext_AnalystRatings_StrongBuy(ctx, field)
			case "Buy":
				return ec.fieldContext_AnalystRatings_Buy(ctx, field)
			case "Hold":
				return ec.fieldContext_AnalystRatings_Hold(ctx, field)
			case "Sell":
				return ec.fieldContext_AnalystRatings_Sell(ctx, field)
			case "StrongSell":
				return ec.fieldContext_AnalystRatings_StrongSell(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalystRatings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_Holders(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_Holders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Holders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Holders)
	fc.Result = res
	return ec.marshalOHolders2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHolders(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_Holders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Institutions":
				return ec.fieldContext_Holders_Institutions(ctx, field)
			case "Funds":
				return ec.fieldContext_Holders_Funds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Holders", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_InsiderTransactions(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_InsiderTransactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsiderTransactions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.InsiderTransactionMapTuple)
	fc.Result = res
	return ec.marshalOInsiderTransactionMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInsiderTransactionMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_InsiderTransactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_InsiderTransactionMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_InsiderTransactionMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InsiderTransactionMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_ESGScores(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_ESGScores(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ESGScores, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ESGScores)
	fc.Result = res
	return ec.marshalOESGScores2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐESGScores(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_ESGScores(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Disclaimer":
				return ec.fieldContext_ESGScores_Disclaimer(ctx, field)
			case "RatingDate":
				return ec.fieldContext_ESGScores_RatingDate(ctx, field)
			case "TotalEsg":
				return ec.fieldContext_ESGScores_TotalEsg(ctx, field)
			case "TotalEsgPercentile":
				return ec.fieldContext_ESGScores_TotalEsgPercentile(ctx, field)
			case "EnvironmentScore":
				return ec.fieldContext_ESGScores_EnvironmentScore(ctx, field)
			case "EnvironmentScorePercentile":
				return ec.fieldContext_ESGScores_EnvironmentScorePercentile(ctx, field)
			case "SocialScore":
				return ec.fieldContext_ESGScores_SocialScore(ctx, field)
			case "SocialScorePercentile":
				return ec.fieldContext_ESGScores_SocialScorePercentile(ctx, field)
			case "GovernanceScore":
				return ec.fieldContext_ESGScores_GovernanceScore(ctx, field)
			case "GovernanceScorePercentile":
				return ec.fieldContext_ESGScores_GovernanceScorePercentile(ctx, field)
			case "ControversyLevel":
				return ec.fieldContext_ESGScores_ControversyLevel(ctx, field)
			case "ActivitiesInvolvement":
				return ec.fieldContext_ESGScores_ActivitiesInvolvement(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ESGScores", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_OutstandingShares(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_OutstandingShares(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutstandingShares, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OutstandingShares)
	fc.Result = res
	return ec.marshalOOutstandingShares2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐOutstandingShares(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_OutstandingShares(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "annual":
				return ec.fieldContext_OutstandingShares_annual(ctx, field)
			case "quarterly":
				return ec.fieldContext_OutstandingShares_quarterly(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OutstandingShares", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_Earnings(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_Earnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Earnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Earnings)
	fc.Result = res
	return ec.marshalOEarnings2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐEarnings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_Earnings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "History":
				return ec.fieldContext_Earnings_History(ctx, field)
			case "Trend":
				return ec.fieldContext_Earnings_Trend(ctx, field)
			case "Annual":
				return ec.fieldContext_Earnings_Annual(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Earnings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquityFundamentals_Financials(ctx context.Context, field graphql.CollectedField, obj *model.EquityFundamentals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EquityFundamentals_Financials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Financials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Financials)
	fc.Result = res
	return ec.marshalOFinancials2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐFinancials(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EquityFundamentals_Financials(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquityFundamentals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Balance_Sheet":
				return ec.fieldContext_Financials_Balance_Sheet(ctx, field)
			case "Cash_Flow":
				return ec.fieldContext_Financials_Cash_Flow(ctx, field)
			case "Income_Statement":
				return ec.fieldContext_Financials_Income_Statement(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Financials", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Financials_Balance_Sheet(ctx context.Context, field graphql.CollectedField, obj *model.Financials) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Financials_Balance_Sheet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BalanceSheet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BalanceSheet)
	fc.Result = res
	return ec.marshalOBalanceSheet2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐBalanceSheet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Financials_Balance_Sheet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Financials",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currency_symbol":
				return ec.fieldContext_BalanceSheet_currency_symbol(ctx, field)
			case "quarterly":
				return ec.fieldContext_BalanceSheet_quarterly(ctx, field)
			case "yearly":
				return ec.fieldContext_BalanceSheet_yearly(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BalanceSheet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Financials_Cash_Flow(ctx context.Context, field graphql.CollectedField, obj *model.Financials) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Financials_Cash_Flow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CashFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CashFlow)
	fc.Result = res
	return ec.marshalOCashFlow2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐCashFlow(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Financials_Cash_Flow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Financials",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currency_symbol":
				return ec.fieldContext_CashFlow_currency_symbol(ctx, field)
			case "quarterly":
				return ec.fieldContext_CashFlow_quarterly(ctx, field)
			case "yearly":
				return ec.fieldContext_CashFlow_yearly(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CashFlow", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Financials_Income_Statement(ctx context.Context, field graphql.CollectedField, obj *model.Financials) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Financials_Income_Statement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncomeStatement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IncomeStatement)
	fc.Result = res
	return ec.marshalOIncomeStatement2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐIncomeStatement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Financials_Income_Statement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Financials",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currency_symbol":
				return ec.fieldContext_IncomeStatement_currency_symbol(ctx, field)
			case "quarterly":
				return ec.fieldContext_IncomeStatement_quarterly(ctx, field)
			case "yearly":
				return ec.fieldContext_IncomeStatement_yearly(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IncomeStatement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Code(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Type(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Name(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Exchange(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Exchange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exchange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Exchange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_CurrencyCode(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_CurrencyCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_CurrencyCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_CurrencyName(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_CurrencyName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_CurrencyName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_CurrencySymbol(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_CurrencySymbol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencySymbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_CurrencySymbol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_CountryName(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_CountryName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_CountryName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_EmployerIdNumber(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_EmployerIdNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmployerIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_EmployerIdNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_FiscalYearEnd(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_FiscalYearEnd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FiscalYearEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_FiscalYearEnd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_InternationalDomestic(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_InternationalDomestic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternationalDomestic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_InternationalDomestic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Sector(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Sector(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sector, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Sector(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Industry(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Industry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Industry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Industry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_GicSector(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_GicSector(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GicSector, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_GicSector(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_GicGroup(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_GicGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GicGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_GicGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_GicIndustry(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_GicIndustry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GicIndustry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_GicIndustry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_GicSubIndustry(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_GicSubIndustry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GicSubIndustry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_GicSubIndustry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_HomeCategory(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_HomeCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HomeCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_HomeCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_IsDelisted(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_IsDelisted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelisted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_IsDelisted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Description(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Address(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_AddressData(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_AddressData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddressData)
	fc.Result = res
	return ec.marshalOAddressData2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAddressData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_AddressData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Street":
				return ec.fieldContext_AddressData_Street(ctx, field)
			case "City":
				return ec.fieldContext_AddressData_City(ctx, field)
			case "State":
				return ec.fieldContext_AddressData_State(ctx, field)
			case "Country":
				return ec.fieldContext_AddressData_Country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddressData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Listings(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Listings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Listings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListingMap)
	fc.Result = res
	return ec.marshalOListingMap2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐListingMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Listings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "item_number":
				return ec.fieldContext_ListingMap_item_number(ctx, field)
			case "value":
				return ec.fieldContext_ListingMap_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListingMap", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Officers(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Officers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Officers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfficerMap)
	fc.Result = res
	return ec.marshalOOfficerMap2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐOfficerMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Officers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "item_number":
				return ec.fieldContext_OfficerMap_item_number(ctx, field)
			case "value":
				return ec.fieldContext_OfficerMap_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OfficerMap", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_Phone(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_Phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_Phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_FullTimeEmployees(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_FullTimeEmployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullTimeEmployees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_FullTimeEmployees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _General_UpdatedAt(ctx context.Context, field graphql.CollectedField, obj *model.General) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_General_UpdatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_General_UpdatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "General",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlights_MarketCapitalization(ctx context.Context, field graphql.CollectedField, obj *model.Highlights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlights_MarketCapitalization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketCapitalization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlights_MarketCapitalization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlights_MarketCapitalizationMln(ctx context.Context, field graphql.CollectedField, obj *model.Highlights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlights_MarketCapitalizationMln(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketCapitalizationMln, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlights_MarketCapitalizationMln(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlights_WallStreetTargetPrice(ctx context.Context, field graphql.CollectedField, obj *model.Highlights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlights_WallStreetTargetPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WallStreetTargetPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlights_WallStreetTargetPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlights_BookValue(ctx context.Context, field graphql.CollectedField, obj *model.Highlights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlights_BookValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlights_BookValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlights_DividendShare(ctx context.Context, field graphql.CollectedField, obj *model.Highlights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlights_DividendShare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DividendShare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlights_DividendShare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlights_DividendYield(ctx context.Context, field graphql.CollectedField, obj *model.Highlights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlights_DividendYield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DividendYield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlights_DividendYield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlights_EarningsShare(ctx context.Context, field graphql.CollectedField, obj *model.Highlights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlights_EarningsShare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EarningsShare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlights_EarningsShare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlights_MostRecentQuarter(ctx context.Context, field graphql.CollectedField, obj *model.Highlights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlights_MostRecentQuarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MostRecentQuarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlights_MostRecentQuarter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlights_ProfitMargin(ctx context.Context, field graphql.CollectedField, obj *model.Highlights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlights_ProfitMargin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfitMargin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlights_ProfitMargin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _History_reportDate(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_History_reportDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReportDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_History_reportDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _History_date(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_History_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_History_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _History_beforeAfterMarket(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_History_beforeAfterMarket(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeforeAfterMarket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_History_beforeAfterMarket(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _History_currency(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_History_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_History_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _History_epsActual(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_History_epsActual(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsActual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_History_epsActual(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _History_epsEstimate(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_History_epsEstimate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsEstimate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_History_epsEstimate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _History_epsDifference(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_History_epsDifference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsDifference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_History_epsDifference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _History_surprisePercent(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_History_surprisePercent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurprisePercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_History_surprisePercent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.HistoryMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.HistoryMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.History)
	fc.Result = res
	return ec.marshalOHistory2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHistory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "reportDate":
				return ec.fieldContext_History_reportDate(ctx, field)
			case "date":
				return ec.fieldContext_History_date(ctx, field)
			case "beforeAfterMarket":
				return ec.fieldContext_History_beforeAfterMarket(ctx, field)
			case "currency":
				return ec.fieldContext_History_currency(ctx, field)
			case "epsActual":
				return ec.fieldContext_History_epsActual(ctx, field)
			case "epsEstimate":
				return ec.fieldContext_History_epsEstimate(ctx, field)
			case "epsDifference":
				return ec.fieldContext_History_epsDifference(ctx, field)
			case "surprisePercent":
				return ec.fieldContext_History_surprisePercent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type History", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Holders_Institutions(ctx context.Context, field graphql.CollectedField, obj *model.Holders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Holders_Institutions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Institutions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.InstitutionMapTuple)
	fc.Result = res
	return ec.marshalOInstitutionMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInstitutionMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Holders_Institutions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Holders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_InstitutionMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_InstitutionMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstitutionMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Holders_Funds(ctx context.Context, field graphql.CollectedField, obj *model.Holders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Holders_Funds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Funds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.InstitutionMapTuple)
	fc.Result = res
	return ec.marshalOInstitutionMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInstitutionMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Holders_Funds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Holders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_InstitutionMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_InstitutionMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstitutionMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatement_currency_symbol(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatement_currency_symbol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencySymbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatement_currency_symbol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatement_quarterly(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatement_quarterly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quarterly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.IncomeStatementItemMapTuple)
	fc.Result = res
	return ec.marshalOIncomeStatementItemMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐIncomeStatementItemMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatement_quarterly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_IncomeStatementItemMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_IncomeStatementItemMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IncomeStatementItemMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatement_yearly(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatement_yearly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Yearly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.IncomeStatementItemMapTuple)
	fc.Result = res
	return ec.marshalOIncomeStatementItemMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐIncomeStatementItemMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatement_yearly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_IncomeStatementItemMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_IncomeStatementItemMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IncomeStatementItemMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_date(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_filing_date(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_filing_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_filing_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_currency_symbol(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_currency_symbol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencySymbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_currency_symbol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_researchDevelopment(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_researchDevelopment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResearchDevelopment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_researchDevelopment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_effectOfAccountingCharges(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_effectOfAccountingCharges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectOfAccountingCharges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_effectOfAccountingCharges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_incomeBeforeTax(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_incomeBeforeTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncomeBeforeTax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_incomeBeforeTax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_minorityInterest(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_minorityInterest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinorityInterest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_minorityInterest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_netIncome(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_netIncome(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetIncome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_netIncome(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_sellingGeneralAdministrative(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_sellingGeneralAdministrative(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellingGeneralAdministrative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_sellingGeneralAdministrative(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_sellingAndMarketingExpenses(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_sellingAndMarketingExpenses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellingAndMarketingExpenses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_sellingAndMarketingExpenses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_grossProfit(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_grossProfit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrossProfit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_grossProfit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_reconciledDepreciation(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_reconciledDepreciation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReconciledDepreciation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_reconciledDepreciation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_ebit(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_ebit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ebit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_ebit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_ebitda(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_ebitda(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ebitda, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_ebitda(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_depreciationAndAmortization(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_depreciationAndAmortization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepreciationAndAmortization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_depreciationAndAmortization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_nonOperatingIncomeNetOther(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_nonOperatingIncomeNetOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonOperatingIncomeNetOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_nonOperatingIncomeNetOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_operatingIncome(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_operatingIncome(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingIncome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_operatingIncome(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_otherOperatingExpenses(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_otherOperatingExpenses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherOperatingExpenses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_otherOperatingExpenses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_interestExpense(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_interestExpense(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestExpense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_interestExpense(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_taxProvision(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_taxProvision(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxProvision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_taxProvision(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_interestIncome(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_interestIncome(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestIncome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_interestIncome(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_netInterestIncome(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_netInterestIncome(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetInterestIncome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_netInterestIncome(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_extraordinaryItems(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_extraordinaryItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExtraordinaryItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_extraordinaryItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_nonRecurring(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_nonRecurring(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonRecurring, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_nonRecurring(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_otherItems(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_otherItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_otherItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_incomeTaxExpense(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_incomeTaxExpense(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncomeTaxExpense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_incomeTaxExpense(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_totalRevenue(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_totalRevenue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRevenue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_totalRevenue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_totalOperatingExpenses(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_totalOperatingExpenses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalOperatingExpenses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_totalOperatingExpenses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_costOfRevenue(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_costOfRevenue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CostOfRevenue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_costOfRevenue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_totalOtherIncomeExpenseNet(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_totalOtherIncomeExpenseNet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalOtherIncomeExpenseNet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_totalOtherIncomeExpenseNet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_discontinuedOperations(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_discontinuedOperations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscontinuedOperations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_discontinuedOperations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_netIncomeFromContinuingOps(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_netIncomeFromContinuingOps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetIncomeFromContinuingOps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_netIncomeFromContinuingOps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_netIncomeApplicableToCommonShares(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_netIncomeApplicableToCommonShares(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetIncomeApplicableToCommonShares, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_netIncomeApplicableToCommonShares(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItem_preferredStockAndOtherAdjustments(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItem_preferredStockAndOtherAdjustments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreferredStockAndOtherAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItem_preferredStockAndOtherAdjustments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItemMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItemMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItemMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItemMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItemMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementItemMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementItemMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementItemMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IncomeStatementItem)
	fc.Result = res
	return ec.marshalOIncomeStatementItem2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐIncomeStatementItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementItemMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementItemMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_IncomeStatementItem_date(ctx, field)
			case "filing_date":
				return ec.fieldContext_IncomeStatementItem_filing_date(ctx, field)
			case "currency_symbol":
				return ec.fieldContext_IncomeStatementItem_currency_symbol(ctx, field)
			case "researchDevelopment":
				return ec.fieldContext_IncomeStatementItem_researchDevelopment(ctx, field)
			case "effectOfAccountingCharges":
				return ec.fieldContext_IncomeStatementItem_effectOfAccountingCharges(ctx, field)
			case "incomeBeforeTax":
				return ec.fieldContext_IncomeStatementItem_incomeBeforeTax(ctx, field)
			case "minorityInterest":
				return ec.fieldContext_IncomeStatementItem_minorityInterest(ctx, field)
			case "netIncome":
				return ec.fieldContext_IncomeStatementItem_netIncome(ctx, field)
			case "sellingGeneralAdministrative":
				return ec.fieldContext_IncomeStatementItem_sellingGeneralAdministrative(ctx, field)
			case "sellingAndMarketingExpenses":
				return ec.fieldContext_IncomeStatementItem_sellingAndMarketingExpenses(ctx, field)
			case "grossProfit":
				return ec.fieldContext_IncomeStatementItem_grossProfit(ctx, field)
			case "reconciledDepreciation":
				return ec.fieldContext_IncomeStatementItem_reconciledDepreciation(ctx, field)
			case "ebit":
				return ec.fieldContext_IncomeStatementItem_ebit(ctx, field)
			case "ebitda":
				return ec.fieldContext_IncomeStatementItem_ebitda(ctx, field)
			case "depreciationAndAmortization":
				return ec.fieldContext_IncomeStatementItem_depreciationAndAmortization(ctx, field)
			case "nonOperatingIncomeNetOther":
				return ec.fieldContext_IncomeStatementItem_nonOperatingIncomeNetOther(ctx, field)
			case "operatingIncome":
				return ec.fieldContext_IncomeStatementItem_operatingIncome(ctx, field)
			case "otherOperatingExpenses":
				return ec.fieldContext_IncomeStatementItem_otherOperatingExpenses(ctx, field)
			case "interestExpense":
				return ec.fieldContext_IncomeStatementItem_interestExpense(ctx, field)
			case "taxProvision":
				return ec.fieldContext_IncomeStatementItem_taxProvision(ctx, field)
			case "interestIncome":
				return ec.fieldContext_IncomeStatementItem_interestIncome(ctx, field)
			case "netInterestIncome":
				return ec.fieldContext_IncomeStatementItem_netInterestIncome(ctx, field)
			case "extraordinaryItems":
				return ec.fieldContext_IncomeStatementItem_extraordinaryItems(ctx, field)
			case "nonRecurring":
				return ec.fieldContext_IncomeStatementItem_nonRecurring(ctx, field)
			case "otherItems":
				return ec.fieldContext_IncomeStatementItem_otherItems(ctx, field)
			case "incomeTaxExpense":
				return ec.fieldContext_IncomeStatementItem_incomeTaxExpense(ctx, field)
			case "totalRevenue":
				return ec.fieldContext_IncomeStatementItem_totalRevenue(ctx, field)
			case "totalOperatingExpenses":
				return ec.fieldContext_IncomeStatementItem_totalOperatingExpenses(ctx, field)
			case "costOfRevenue":
				return ec.fieldContext_IncomeStatementItem_costOfRevenue(ctx, field)
			case "totalOtherIncomeExpenseNet":
				return ec.fieldContext_IncomeStatementItem_totalOtherIncomeExpenseNet(ctx, field)
			case "discontinuedOperations":
				return ec.fieldContext_IncomeStatementItem_discontinuedOperations(ctx, field)
			case "netIncomeFromContinuingOps":
				return ec.fieldContext_IncomeStatementItem_netIncomeFromContinuingOps(ctx, field)
			case "netIncomeApplicableToCommonShares":
				return ec.fieldContext_IncomeStatementItem_netIncomeApplicableToCommonShares(ctx, field)
			case "preferredStockAndOtherAdjustments":
				return ec.fieldContext_IncomeStatementItem_preferredStockAndOtherAdjustments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IncomeStatementItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_date(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_ownerCik(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_ownerCik(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerCik, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_ownerCik(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_ownerName(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_ownerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_ownerName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_transactionDate(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_transactionDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_transactionDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_transactionCode(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_transactionCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_transactionCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_transactionAmount(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_transactionAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_transactionAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_transactionPrice(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_transactionPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_transactionPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_transactionAcquiredDisposed(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_transactionAcquiredDisposed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionAcquiredDisposed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_transactionAcquiredDisposed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_postTransactionAmount(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_postTransactionAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostTransactionAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_postTransactionAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransaction_secLink(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransaction_secLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransaction_secLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransactionMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransactionMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransactionMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransactionMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransactionMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsiderTransactionMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.InsiderTransactionMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsiderTransactionMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.InsiderTransaction)
	fc.Result = res
	return ec.marshalOInsiderTransaction2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInsiderTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsiderTransactionMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsiderTransactionMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_InsiderTransaction_date(ctx, field)
			case "ownerCik":
				return ec.fieldContext_InsiderTransaction_ownerCik(ctx, field)
			case "ownerName":
				return ec.fieldContext_InsiderTransaction_ownerName(ctx, field)
			case "transactionDate":
				return ec.fieldContext_InsiderTransaction_transactionDate(ctx, field)
			case "transactionCode":
				return ec.fieldContext_InsiderTransaction_transactionCode(ctx, field)
			case "transactionAmount":
				return ec.fieldContext_InsiderTransaction_transactionAmount(ctx, field)
			case "transactionPrice":
				return ec.fieldContext_InsiderTransaction_transactionPrice(ctx, field)
			case "transactionAcquiredDisposed":
				return ec.fieldContext_InsiderTransaction_transactionAcquiredDisposed(ctx, field)
			case "postTransactionAmount":
				return ec.fieldContext_InsiderTransaction_postTransactionAmount(ctx, field)
			case "secLink":
				return ec.fieldContext_InsiderTransaction_secLink(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InsiderTransaction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Institution_name(ctx context.Context, field graphql.CollectedField, obj *model.Institution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Institution_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Institution_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Institution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Institution_date(ctx context.Context, field graphql.CollectedField, obj *model.Institution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Institution_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Institution_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Institution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Institution_totalShares(ctx context.Context, field graphql.CollectedField, obj *model.Institution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Institution_totalShares(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalShares, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Institution_totalShares(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Institution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Institution_totalAssets(ctx context.Context, field graphql.CollectedField, obj *model.Institution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Institution_totalAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Institution_totalAssets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Institution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Institution_currentShares(ctx context.Context, field graphql.CollectedField, obj *model.Institution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Institution_currentShares(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentShares, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Institution_currentShares(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Institution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Institution_change(ctx context.Context, field graphql.CollectedField, obj *model.Institution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Institution_change(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Change, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Institution_change(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Institution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Institution_change_p(ctx context.Context, field graphql.CollectedField, obj *model.Institution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Institution_change_p(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Institution_change_p(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Institution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InstitutionMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.InstitutionMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InstitutionMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InstitutionMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InstitutionMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InstitutionMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.InstitutionMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InstitutionMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Institution)
	fc.Result = res
	return ec.marshalOInstitution2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInstitution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InstitutionMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InstitutionMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Institution_name(ctx, field)
			case "date":
				return ec.fieldContext_Institution_date(ctx, field)
			case "totalShares":
				return ec.fieldContext_Institution_totalShares(ctx, field)
			case "totalAssets":
				return ec.fieldContext_Institution_totalAssets(ctx, field)
			case "currentShares":
				return ec.fieldContext_Institution_currentShares(ctx, field)
			case "change":
				return ec.fieldContext_Institution_change(ctx, field)
			case "change_p":
				return ec.fieldContext_Institution_change_p(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Institution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Listing_Code(ctx context.Context, field graphql.CollectedField, obj *model.Listing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Listing_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Listing_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Listing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Listing_Exchange(ctx context.Context, field graphql.CollectedField, obj *model.Listing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Listing_Exchange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exchange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Listing_Exchange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Listing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Listing_Name(ctx context.Context, field graphql.CollectedField, obj *model.Listing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Listing_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Listing_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Listing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListingMap_item_number(ctx context.Context, field graphql.CollectedField, obj *model.ListingMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListingMap_item_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListingMap_item_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListingMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListingMap_value(ctx context.Context, field graphql.CollectedField, obj *model.ListingMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListingMap_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Listing)
	fc.Result = res
	return ec.marshalOListing2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐListing(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListingMap_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListingMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_Listing_Code(ctx, field)
			case "Exchange":
				return ec.fieldContext_Listing_Exchange(ctx, field)
			case "Name":
				return ec.fieldContext_Listing_Name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Listing", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NumberDividendsByYear_Year(ctx context.Context, field graphql.CollectedField, obj *model.NumberDividendsByYear) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NumberDividendsByYear_Year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NumberDividendsByYear_Year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NumberDividendsByYear",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NumberDividendsByYear_Count(ctx context.Context, field graphql.CollectedField, obj *model.NumberDividendsByYear) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NumberDividendsByYear_Count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NumberDividendsByYear_Count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NumberDividendsByYear",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NumberDividendsByYearMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.NumberDividendsByYearMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NumberDividendsByYearMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NumberDividendsByYearMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NumberDividendsByYearMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NumberDividendsByYearMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.NumberDividendsByYearMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NumberDividendsByYearMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NumberDividendsByYear)
	fc.Result = res
	return ec.marshalONumberDividendsByYear2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐNumberDividendsByYear(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NumberDividendsByYearMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NumberDividendsByYearMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Year":
				return ec.fieldContext_NumberDividendsByYear_Year(ctx, field)
			case "Count":
				return ec.fieldContext_NumberDividendsByYear_Count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NumberDividendsByYear", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Officer_Name(ctx context.Context, field graphql.CollectedField, obj *model.Officer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Officer_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Officer_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Officer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Officer_Title(ctx context.Context, field graphql.CollectedField, obj *model.Officer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Officer_Title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Officer_Title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Officer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Officer_YearBorn(ctx context.Context, field graphql.CollectedField, obj *model.Officer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Officer_YearBorn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearBorn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Officer_YearBorn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Officer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OfficerMap_item_number(ctx context.Context, field graphql.CollectedField, obj *model.OfficerMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OfficerMap_item_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OfficerMap_item_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OfficerMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OfficerMap_value(ctx context.Context, field graphql.CollectedField, obj *model.OfficerMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OfficerMap_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Officer)
	fc.Result = res
	return ec.marshalOOfficer2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐOfficer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OfficerMap_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OfficerMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Name":
				return ec.fieldContext_Officer_Name(ctx, field)
			case "Title":
				return ec.fieldContext_Officer_Title(ctx, field)
			case "YearBorn":
				return ec.fieldContext_Officer_YearBorn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Officer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutstandingShares_annual(ctx context.Context, field graphql.CollectedField, obj *model.OutstandingShares) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OutstandingShares_annual(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AnnualMapTuple)
	fc.Result = res
	return ec.marshalOAnnualMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OutstandingShares_annual(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutstandingShares",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_AnnualMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_AnnualMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnnualMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutstandingShares_quarterly(ctx context.Context, field graphql.CollectedField, obj *model.OutstandingShares) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OutstandingShares_quarterly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quarterly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.QuarterlyMapTuple)
	fc.Result = res
	return ec.marshalOQuarterlyMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐQuarterlyMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OutstandingShares_quarterly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutstandingShares",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_QuarterlyMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_QuarterlyMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuarterlyMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quarterly_date(ctx context.Context, field graphql.CollectedField, obj *model.Quarterly) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quarterly_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quarterly_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quarterly",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quarterly_dateFormatted(ctx context.Context, field graphql.CollectedField, obj *model.Quarterly) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quarterly_dateFormatted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateFormatted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quarterly_dateFormatted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quarterly",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quarterly_sharesMln(ctx context.Context, field graphql.CollectedField, obj *model.Quarterly) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quarterly_sharesMln(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesMln, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quarterly_sharesMln(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quarterly",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quarterly_shares(ctx context.Context, field graphql.CollectedField, obj *model.Quarterly) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quarterly_shares(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shares, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quarterly_shares(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quarterly",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuarterlyMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.QuarterlyMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuarterlyMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuarterlyMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuarterlyMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuarterlyMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.QuarterlyMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuarterlyMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Quarterly)
	fc.Result = res
	return ec.marshalOQuarterly2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐQuarterly(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuarterlyMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuarterlyMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_Quarterly_date(ctx, field)
			case "dateFormatted":
				return ec.fieldContext_Quarterly_dateFormatted(ctx, field)
			case "sharesMln":
				return ec.fieldContext_Quarterly_sharesMln(ctx, field)
			case "shares":
				return ec.fieldContext_Quarterly_shares(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quarterly", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getFundamentals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getFundamentals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetFundamentals(rctx, fc.Args["ticker"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EquityFundamentals)
	fc.Result = res
	return ec.marshalNEquityFundamentals2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐEquityFundamentals(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getFundamentals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "General":
				return ec.fieldContext_EquityFundamentals_General(ctx, field)
			case "Highlights":
				return ec.fieldContext_EquityFundamentals_Highlights(ctx, field)
			case "Valuation":
				return ec.fieldContext_EquityFundamentals_Valuation(ctx, field)
			case "SharesStats":
				return ec.fieldContext_EquityFundamentals_SharesStats(ctx, field)
			case "Technicals":
				return ec.fieldContext_EquityFundamentals_Technicals(ctx, field)
			case "SplitsDividends":
				return ec.fieldContext_EquityFundamentals_SplitsDividends(ctx, field)
			case "AnalystRatings":
				return ec.fieldContext_EquityFundamentals_AnalystRatings(ctx, field)
			case "Holders":
				return ec.fieldContext_EquityFundamentals_Holders(ctx, field)
			case "InsiderTransactions":
				return ec.fieldContext_EquityFundamentals_InsiderTransactions(ctx, field)
			case "ESGScores":
				return ec.fieldContext_EquityFundamentals_ESGScores(ctx, field)
			case "OutstandingShares":
				return ec.fieldContext_EquityFundamentals_OutstandingShares(ctx, field)
			case "Earnings":
				return ec.fieldContext_EquityFundamentals_Earnings(ctx, field)
			case "Financials":
				return ec.fieldContext_EquityFundamentals_Financials(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EquityFundamentals", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getFundamentals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SharesStats_SharesOutstanding(ctx context.Context, field graphql.CollectedField, obj *model.SharesStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SharesStats_SharesOutstanding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesOutstanding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SharesStats_SharesOutstanding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SharesStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SharesStats_SharesFloat(ctx context.Context, field graphql.CollectedField, obj *model.SharesStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SharesStats_SharesFloat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesFloat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SharesStats_SharesFloat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SharesStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SharesStats_PercentInsiders(ctx context.Context, field graphql.CollectedField, obj *model.SharesStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SharesStats_PercentInsiders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PercentInsiders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SharesStats_PercentInsiders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SharesStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SharesStats_PercentInstitutions(ctx context.Context, field graphql.CollectedField, obj *model.SharesStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SharesStats_PercentInstitutions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PercentInstitutions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SharesStats_PercentInstitutions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SharesStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SharesStats_SharesShort(ctx context.Context, field graphql.CollectedField, obj *model.SharesStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SharesStats_SharesShort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesShort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SharesStats_SharesShort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SharesStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SharesStats_SharesShortPriorMonth(ctx context.Context, field graphql.CollectedField, obj *model.SharesStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SharesStats_SharesShortPriorMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesShortPriorMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SharesStats_SharesShortPriorMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SharesStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SharesStats_ShortRatio(ctx context.Context, field graphql.CollectedField, obj *model.SharesStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SharesStats_ShortRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SharesStats_ShortRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SharesStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SharesStats_ShortPercentOutstanding(ctx context.Context, field graphql.CollectedField, obj *model.SharesStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SharesStats_ShortPercentOutstanding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortPercentOutstanding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SharesStats_ShortPercentOutstanding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SharesStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SharesStats_ShortPercentFloat(ctx context.Context, field graphql.CollectedField, obj *model.SharesStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SharesStats_ShortPercentFloat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortPercentFloat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SharesStats_ShortPercentFloat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SharesStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SplitsDividends_ForwardAnnualDividendRate(ctx context.Context, field graphql.CollectedField, obj *model.SplitsDividends) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SplitsDividends_ForwardAnnualDividendRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ForwardAnnualDividendRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SplitsDividends_ForwardAnnualDividendRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SplitsDividends",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SplitsDividends_ForwardAnnualDividendYield(ctx context.Context, field graphql.CollectedField, obj *model.SplitsDividends) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SplitsDividends_ForwardAnnualDividendYield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ForwardAnnualDividendYield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SplitsDividends_ForwardAnnualDividendYield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SplitsDividends",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SplitsDividends_PayoutRatio(ctx context.Context, field graphql.CollectedField, obj *model.SplitsDividends) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SplitsDividends_PayoutRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayoutRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SplitsDividends_PayoutRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SplitsDividends",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SplitsDividends_DividendDate(ctx context.Context, field graphql.CollectedField, obj *model.SplitsDividends) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SplitsDividends_DividendDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DividendDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SplitsDividends_DividendDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SplitsDividends",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SplitsDividends_ExDividendDate(ctx context.Context, field graphql.CollectedField, obj *model.SplitsDividends) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SplitsDividends_ExDividendDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExDividendDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SplitsDividends_ExDividendDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SplitsDividends",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SplitsDividends_LastSplitFactor(ctx context.Context, field graphql.CollectedField, obj *model.SplitsDividends) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SplitsDividends_LastSplitFactor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastSplitFactor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SplitsDividends_LastSplitFactor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SplitsDividends",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SplitsDividends_LastSplitDate(ctx context.Context, field graphql.CollectedField, obj *model.SplitsDividends) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SplitsDividends_LastSplitDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastSplitDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SplitsDividends_LastSplitDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SplitsDividends",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SplitsDividends_NumberDividendsByYear(ctx context.Context, field graphql.CollectedField, obj *model.SplitsDividends) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SplitsDividends_NumberDividendsByYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberDividendsByYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NumberDividendsByYearMapTuple)
	fc.Result = res
	return ec.marshalONumberDividendsByYearMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐNumberDividendsByYearMapTuple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SplitsDividends_NumberDividendsByYear(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SplitsDividends",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_NumberDividendsByYearMapTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_NumberDividendsByYearMapTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NumberDividendsByYearMapTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Technicals_Beta(ctx context.Context, field graphql.CollectedField, obj *model.Technicals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Technicals_Beta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Beta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Technicals_Beta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Technicals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Technicals_WeekHigh52(ctx context.Context, field graphql.CollectedField, obj *model.Technicals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Technicals_WeekHigh52(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Technicals().WeekHigh52(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Technicals_WeekHigh52(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Technicals",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Technicals_WeekLow52(ctx context.Context, field graphql.CollectedField, obj *model.Technicals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Technicals_WeekLow52(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Technicals().WeekLow52(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Technicals_WeekLow52(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Technicals",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Technicals_DayMA50(ctx context.Context, field graphql.CollectedField, obj *model.Technicals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Technicals_DayMA50(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Technicals().DayMa50(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Technicals_DayMA50(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Technicals",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Technicals_DayMA200(ctx context.Context, field graphql.CollectedField, obj *model.Technicals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Technicals_DayMA200(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Technicals().DayMa200(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Technicals_DayMA200(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Technicals",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Technicals_SharesShort(ctx context.Context, field graphql.CollectedField, obj *model.Technicals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Technicals_SharesShort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesShort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Technicals_SharesShort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Technicals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Technicals_SharesShortPriorMonth(ctx context.Context, field graphql.CollectedField, obj *model.Technicals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Technicals_SharesShortPriorMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesShortPriorMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Technicals_SharesShortPriorMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Technicals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Technicals_ShortRatio(ctx context.Context, field graphql.CollectedField, obj *model.Technicals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Technicals_ShortRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Technicals_ShortRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Technicals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Technicals_ShortPercent(ctx context.Context, field graphql.CollectedField, obj *model.Technicals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Technicals_ShortPercent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortPercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Technicals_ShortPercent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Technicals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_date(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_period(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_period(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_growth(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_growth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Growth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_growth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_earningsEstimateAvg(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_earningsEstimateAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EarningsEstimateAvg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_earningsEstimateAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_earningsEstimateLow(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_earningsEstimateLow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EarningsEstimateLow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_earningsEstimateLow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_earningsEstimateHigh(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_earningsEstimateHigh(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EarningsEstimateHigh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_earningsEstimateHigh(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_earningsEstimateYearAgoEps(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_earningsEstimateYearAgoEps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EarningsEstimateYearAgoEps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_earningsEstimateYearAgoEps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_earningsEstimateNumberOfAnalysts(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_earningsEstimateNumberOfAnalysts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EarningsEstimateNumberOfAnalysts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_earningsEstimateNumberOfAnalysts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_earningsEstimateGrowth(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_earningsEstimateGrowth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EarningsEstimateGrowth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_earningsEstimateGrowth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_revenueEstimateAvg(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_revenueEstimateAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevenueEstimateAvg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_revenueEstimateAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_revenueEstimateLow(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_revenueEstimateLow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevenueEstimateLow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_revenueEstimateLow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_revenueEstimateHigh(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_revenueEstimateHigh(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevenueEstimateHigh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_revenueEstimateHigh(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_revenueEstimateYearAgoEps(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_revenueEstimateYearAgoEps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevenueEstimateYearAgoEps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_revenueEstimateYearAgoEps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_revenueEstimateNumberOfAnalysts(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_revenueEstimateNumberOfAnalysts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevenueEstimateNumberOfAnalysts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_revenueEstimateNumberOfAnalysts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_revenueEstimateGrowth(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_revenueEstimateGrowth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevenueEstimateGrowth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_revenueEstimateGrowth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_epsTrendCurrent(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_epsTrendCurrent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsTrendCurrent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_epsTrendCurrent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_epsTrend7daysAgo(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_epsTrend7daysAgo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsTrend7daysAgo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_epsTrend7daysAgo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_epsTrend30daysAgo(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_epsTrend30daysAgo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsTrend30daysAgo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_epsTrend30daysAgo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_epsTrend60daysAgo(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_epsTrend60daysAgo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsTrend60daysAgo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_epsTrend60daysAgo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_epsTrend90daysAgo(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_epsTrend90daysAgo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsTrend90daysAgo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_epsTrend90daysAgo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_epsRevisionsUpLast7days(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_epsRevisionsUpLast7days(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsRevisionsUpLast7days, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_epsRevisionsUpLast7days(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_epsRevisionsUpLast30days(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_epsRevisionsUpLast30days(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsRevisionsUpLast30days, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_epsRevisionsUpLast30days(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_epsRevisionsDownLast7days(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_epsRevisionsDownLast7days(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsRevisionsDownLast7days, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_epsRevisionsDownLast7days(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trend_epsRevisionsDownLast30days(ctx context.Context, field graphql.CollectedField, obj *model.Trend) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trend_epsRevisionsDownLast30days(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpsRevisionsDownLast30days, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trend_epsRevisionsDownLast30days(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trend",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendMapTuple_key(ctx context.Context, field graphql.CollectedField, obj *model.TrendMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendMapTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendMapTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendMapTuple_value(ctx context.Context, field graphql.CollectedField, obj *model.TrendMapTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendMapTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Trend)
	fc.Result = res
	return ec.marshalOTrend2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐTrend(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendMapTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendMapTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_Trend_date(ctx, field)
			case "period":
				return ec.fieldContext_Trend_period(ctx, field)
			case "growth":
				return ec.fieldContext_Trend_growth(ctx, field)
			case "earningsEstimateAvg":
				return ec.fieldContext_Trend_earningsEstimateAvg(ctx, field)
			case "earningsEstimateLow":
				return ec.fieldContext_Trend_earningsEstimateLow(ctx, field)
			case "earningsEstimateHigh":
				return ec.fieldContext_Trend_earningsEstimateHigh(ctx, field)
			case "earningsEstimateYearAgoEps":
				return ec.fieldContext_Trend_earningsEstimateYearAgoEps(ctx, field)
			case "earningsEstimateNumberOfAnalysts":
				return ec.fieldContext_Trend_earningsEstimateNumberOfAnalysts(ctx, field)
			case "earningsEstimateGrowth":
				return ec.fieldContext_Trend_earningsEstimateGrowth(ctx, field)
			case "revenueEstimateAvg":
				return ec.fieldContext_Trend_revenueEstimateAvg(ctx, field)
			case "revenueEstimateLow":
				return ec.fieldContext_Trend_revenueEstimateLow(ctx, field)
			case "revenueEstimateHigh":
				return ec.fieldContext_Trend_revenueEstimateHigh(ctx, field)
			case "revenueEstimateYearAgoEps":
				return ec.fieldContext_Trend_revenueEstimateYearAgoEps(ctx, field)
			case "revenueEstimateNumberOfAnalysts":
				return ec.fieldContext_Trend_revenueEstimateNumberOfAnalysts(ctx, field)
			case "revenueEstimateGrowth":
				return ec.fieldContext_Trend_revenueEstimateGrowth(ctx, field)
			case "epsTrendCurrent":
				return ec.fieldContext_Trend_epsTrendCurrent(ctx, field)
			case "epsTrend7daysAgo":
				return ec.fieldContext_Trend_epsTrend7daysAgo(ctx, field)
			case "epsTrend30daysAgo":
				return ec.fieldContext_Trend_epsTrend30daysAgo(ctx, field)
			case "epsTrend60daysAgo":
				return ec.fieldContext_Trend_epsTrend60daysAgo(ctx, field)
			case "epsTrend90daysAgo":
				return ec.fieldContext_Trend_epsTrend90daysAgo(ctx, field)
			case "epsRevisionsUpLast7days":
				return ec.fieldContext_Trend_epsRevisionsUpLast7days(ctx, field)
			case "epsRevisionsUpLast30days":
				return ec.fieldContext_Trend_epsRevisionsUpLast30days(ctx, field)
			case "epsRevisionsDownLast7days":
				return ec.fieldContext_Trend_epsRevisionsDownLast7days(ctx, field)
			case "epsRevisionsDownLast30days":
				return ec.fieldContext_Trend_epsRevisionsDownLast30days(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Trend", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Valuation_EnterpriseValue(ctx context.Context, field graphql.CollectedField, obj *model.Valuation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Valuation_EnterpriseValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Valuation_EnterpriseValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Valuation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Valuation_EnterpriseValueRevenue(ctx context.Context, field graphql.CollectedField, obj *model.Valuation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Valuation_EnterpriseValueRevenue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseValueRevenue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Valuation_EnterpriseValueRevenue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Valuation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Valuation_EnterpriseValueEbitda(ctx context.Context, field graphql.CollectedField, obj *model.Valuation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Valuation_EnterpriseValueEbitda(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseValueEbitda, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Valuation_EnterpriseValueEbitda(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Valuation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activityInvolvementImplementors = []string{"ActivityInvolvement"}

func (ec *executionContext) _ActivityInvolvement(ctx context.Context, sel ast.SelectionSet, obj *model.ActivityInvolvement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityInvolvementImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityInvolvement")
		case "Activity":

			out.Values[i] = ec._ActivityInvolvement_Activity(ctx, field, obj)

		case "Involvement":

			out.Values[i] = ec._ActivityInvolvement_Involvement(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var activityInvolvementMapTupleImplementors = []string{"ActivityInvolvementMapTuple"}

func (ec *executionContext) _ActivityInvolvementMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.ActivityInvolvementMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityInvolvementMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityInvolvementMapTuple")
		case "key":

			out.Values[i] = ec._ActivityInvolvementMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._ActivityInvolvementMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addressDataImplementors = []string{"AddressData"}

func (ec *executionContext) _AddressData(ctx context.Context, sel ast.SelectionSet, obj *model.AddressData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addressDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddressData")
		case "Street":

			out.Values[i] = ec._AddressData_Street(ctx, field, obj)

		case "City":

			out.Values[i] = ec._AddressData_City(ctx, field, obj)

		case "State":

			out.Values[i] = ec._AddressData_State(ctx, field, obj)

		case "Country":

			out.Values[i] = ec._AddressData_Country(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var analystRatingsImplementors = []string{"AnalystRatings"}

func (ec *executionContext) _AnalystRatings(ctx context.Context, sel ast.SelectionSet, obj *model.AnalystRatings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analystRatingsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalystRatings")
		case "Rating":

			out.Values[i] = ec._AnalystRatings_Rating(ctx, field, obj)

		case "TargetPrice":

			out.Values[i] = ec._AnalystRatings_TargetPrice(ctx, field, obj)

		case "StrongBuy":

			out.Values[i] = ec._AnalystRatings_StrongBuy(ctx, field, obj)

		case "Buy":

			out.Values[i] = ec._AnalystRatings_Buy(ctx, field, obj)

		case "Hold":

			out.Values[i] = ec._AnalystRatings_Hold(ctx, field, obj)

		case "Sell":

			out.Values[i] = ec._AnalystRatings_Sell(ctx, field, obj)

		case "StrongSell":

			out.Values[i] = ec._AnalystRatings_StrongSell(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var annualImplementors = []string{"Annual"}

func (ec *executionContext) _Annual(ctx context.Context, sel ast.SelectionSet, obj *model.Annual) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, annualImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Annual")
		case "date":

			out.Values[i] = ec._Annual_date(ctx, field, obj)

		case "dateFormatted":

			out.Values[i] = ec._Annual_dateFormatted(ctx, field, obj)

		case "sharesMln":

			out.Values[i] = ec._Annual_sharesMln(ctx, field, obj)

		case "shares":

			out.Values[i] = ec._Annual_shares(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var annualEarningsImplementors = []string{"AnnualEarnings"}

func (ec *executionContext) _AnnualEarnings(ctx context.Context, sel ast.SelectionSet, obj *model.AnnualEarnings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, annualEarningsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnnualEarnings")
		case "date":

			out.Values[i] = ec._AnnualEarnings_date(ctx, field, obj)

		case "epsActual":

			out.Values[i] = ec._AnnualEarnings_epsActual(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var annualEarningsMapTupleImplementors = []string{"AnnualEarningsMapTuple"}

func (ec *executionContext) _AnnualEarningsMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.AnnualEarningsMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, annualEarningsMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnnualEarningsMapTuple")
		case "key":

			out.Values[i] = ec._AnnualEarningsMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._AnnualEarningsMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var annualMapTupleImplementors = []string{"AnnualMapTuple"}

func (ec *executionContext) _AnnualMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.AnnualMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, annualMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnnualMapTuple")
		case "key":

			out.Values[i] = ec._AnnualMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._AnnualMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var balanceSheetImplementors = []string{"BalanceSheet"}

func (ec *executionContext) _BalanceSheet(ctx context.Context, sel ast.SelectionSet, obj *model.BalanceSheet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, balanceSheetImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BalanceSheet")
		case "currency_symbol":

			out.Values[i] = ec._BalanceSheet_currency_symbol(ctx, field, obj)

		case "quarterly":

			out.Values[i] = ec._BalanceSheet_quarterly(ctx, field, obj)

		case "yearly":

			out.Values[i] = ec._BalanceSheet_yearly(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var balanceSheetItemImplementors = []string{"BalanceSheetItem"}

func (ec *executionContext) _BalanceSheetItem(ctx context.Context, sel ast.SelectionSet, obj *model.BalanceSheetItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, balanceSheetItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BalanceSheetItem")
		case "date":

			out.Values[i] = ec._BalanceSheetItem_date(ctx, field, obj)

		case "filing_date":

			out.Values[i] = ec._BalanceSheetItem_filing_date(ctx, field, obj)

		case "currency_symbol":

			out.Values[i] = ec._BalanceSheetItem_currency_symbol(ctx, field, obj)

		case "totalAssets":

			out.Values[i] = ec._BalanceSheetItem_totalAssets(ctx, field, obj)

		case "intangibleAssets":

			out.Values[i] = ec._BalanceSheetItem_intangibleAssets(ctx, field, obj)

		case "earningAssets":

			out.Values[i] = ec._BalanceSheetItem_earningAssets(ctx, field, obj)

		case "otherCurrentAssets":

			out.Values[i] = ec._BalanceSheetItem_otherCurrentAssets(ctx, field, obj)

		case "totalLiab":

			out.Values[i] = ec._BalanceSheetItem_totalLiab(ctx, field, obj)

		case "totalStockholderEquity":

			out.Values[i] = ec._BalanceSheetItem_totalStockholderEquity(ctx, field, obj)

		case "deferredLongTermLiab":

			out.Values[i] = ec._BalanceSheetItem_deferredLongTermLiab(ctx, field, obj)

		case "otherCurrentLiab":

			out.Values[i] = ec._BalanceSheetItem_otherCurrentLiab(ctx, field, obj)

		case "commonStock":

			out.Values[i] = ec._BalanceSheetItem_commonStock(ctx, field, obj)

		case "retainedEarnings":

			out.Values[i] = ec._BalanceSheetItem_retainedEarnings(ctx, field, obj)

		case "otherLiab":

			out.Values[i] = ec._BalanceSheetItem_otherLiab(ctx, field, obj)

		case "goodWill":

			out.Values[i] = ec._BalanceSheetItem_goodWill(ctx, field, obj)

		case "otherAssets":

			out.Values[i] = ec._BalanceSheetItem_otherAssets(ctx, field, obj)

		case "cash":

			out.Values[i] = ec._BalanceSheetItem_cash(ctx, field, obj)

		case "totalCurrentLiabilities":

			out.Values[i] = ec._BalanceSheetItem_totalCurrentLiabilities(ctx, field, obj)

		case "netDebt":

			out.Values[i] = ec._BalanceSheetItem_netDebt(ctx, field, obj)

		case "shortTermDebt":

			out.Values[i] = ec._BalanceSheetItem_shortTermDebt(ctx, field, obj)

		case "shortLongTermDebt":

			out.Values[i] = ec._BalanceSheetItem_shortLongTermDebt(ctx, field, obj)

		case "shortLongTermDebtTotal":

			out.Values[i] = ec._BalanceSheetItem_shortLongTermDebtTotal(ctx, field, obj)

		case "otherStockholderEquity":

			out.Values[i] = ec._BalanceSheetItem_otherStockholderEquity(ctx, field, obj)

		case "propertyPlantEquipment":

			out.Values[i] = ec._BalanceSheetItem_propertyPlantEquipment(ctx, field, obj)

		case "totalCurrentAssets":

			out.Values[i] = ec._BalanceSheetItem_totalCurrentAssets(ctx, field, obj)

		case "longTermInvestments":

			out.Values[i] = ec._BalanceSheetItem_longTermInvestments(ctx, field, obj)

		case "netTangibleAssets":

			out.Values[i] = ec._BalanceSheetItem_netTangibleAssets(ctx, field, obj)

		case "shortTermInvestments":

			out.Values[i] = ec._BalanceSheetItem_shortTermInvestments(ctx, field, obj)

		case "netReceivables":

			out.Values[i] = ec._BalanceSheetItem_netReceivables(ctx, field, obj)

		case "longTermDebt":

			out.Values[i] = ec._BalanceSheetItem_longTermDebt(ctx, field, obj)

		case "inventory":

			out.Values[i] = ec._BalanceSheetItem_inventory(ctx, field, obj)

		case "accountsPayable":

			out.Values[i] = ec._BalanceSheetItem_accountsPayable(ctx, field, obj)

		case "totalPermanentEquity":

			out.Values[i] = ec._BalanceSheetItem_totalPermanentEquity(ctx, field, obj)

		case "noncontrollingInterestInConsolidatedEntity":

			out.Values[i] = ec._BalanceSheetItem_noncontrollingInterestInConsolidatedEntity(ctx, field, obj)

		case "temporaryEquityRedeemableNoncontrollingInterests":

			out.Values[i] = ec._BalanceSheetItem_temporaryEquityRedeemableNoncontrollingInterests(ctx, field, obj)

		case "accumulatedOtherComprehensiveIncome":

			out.Values[i] = ec._BalanceSheetItem_accumulatedOtherComprehensiveIncome(ctx, field, obj)

		case "additionalPaidInCapital":

			out.Values[i] = ec._BalanceSheetItem_additionalPaidInCapital(ctx, field, obj)

		case "commonStockTotalEquity":

			out.Values[i] = ec._BalanceSheetItem_commonStockTotalEquity(ctx, field, obj)

		case "preferredStockTotalEquity":

			out.Values[i] = ec._BalanceSheetItem_preferredStockTotalEquity(ctx, field, obj)

		case "retainedEarningsTotalEquity":

			out.Values[i] = ec._BalanceSheetItem_retainedEarningsTotalEquity(ctx, field, obj)

		case "treasuryStock":

			out.Values[i] = ec._BalanceSheetItem_treasuryStock(ctx, field, obj)

		case "accumulatedAmortization":

			out.Values[i] = ec._BalanceSheetItem_accumulatedAmortization(ctx, field, obj)

		case "nonCurrrentAssetsOther":

			out.Values[i] = ec._BalanceSheetItem_nonCurrrentAssetsOther(ctx, field, obj)

		case "deferredLongTermAssetCharges":

			out.Values[i] = ec._BalanceSheetItem_deferredLongTermAssetCharges(ctx, field, obj)

		case "nonCurrentAssetsTotal":

			out.Values[i] = ec._BalanceSheetItem_nonCurrentAssetsTotal(ctx, field, obj)

		case "capitalLeaseObligations":

			out.Values[i] = ec._BalanceSheetItem_capitalLeaseObligations(ctx, field, obj)

		case "longTermDebtTotal":

			out.Values[i] = ec._BalanceSheetItem_longTermDebtTotal(ctx, field, obj)

		case "nonCurrentLiabilitiesOther":

			out.Values[i] = ec._BalanceSheetItem_nonCurrentLiabilitiesOther(ctx, field, obj)

		case "nonCurrentLiabilitiesTotal":

			out.Values[i] = ec._BalanceSheetItem_nonCurrentLiabilitiesTotal(ctx, field, obj)

		case "negativeGoodwill":

			out.Values[i] = ec._BalanceSheetItem_negativeGoodwill(ctx, field, obj)

		case "warrants":

			out.Values[i] = ec._BalanceSheetItem_warrants(ctx, field, obj)

		case "preferredStockRedeemable":

			out.Values[i] = ec._BalanceSheetItem_preferredStockRedeemable(ctx, field, obj)

		case "capitalSurpluse":

			out.Values[i] = ec._BalanceSheetItem_capitalSurpluse(ctx, field, obj)

		case "liabilitiesAndStockholdersEquity":

			out.Values[i] = ec._BalanceSheetItem_liabilitiesAndStockholdersEquity(ctx, field, obj)

		case "cashAndShortTermInvestments":

			out.Values[i] = ec._BalanceSheetItem_cashAndShortTermInvestments(ctx, field, obj)

		case "propertyPlantAndEquipmentGross":

			out.Values[i] = ec._BalanceSheetItem_propertyPlantAndEquipmentGross(ctx, field, obj)

		case "propertyPlantAndEquipmentNet":

			out.Values[i] = ec._BalanceSheetItem_propertyPlantAndEquipmentNet(ctx, field, obj)

		case "accumulatedDepreciation":

			out.Values[i] = ec._BalanceSheetItem_accumulatedDepreciation(ctx, field, obj)

		case "netWorkingCapital":

			out.Values[i] = ec._BalanceSheetItem_netWorkingCapital(ctx, field, obj)

		case "netInvestedCapital":

			out.Values[i] = ec._BalanceSheetItem_netInvestedCapital(ctx, field, obj)

		case "commonStockSharesOutstanding":

			out.Values[i] = ec._BalanceSheetItem_commonStockSharesOutstanding(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var balanceSheetItemMapTupleImplementors = []string{"BalanceSheetItemMapTuple"}

func (ec *executionContext) _BalanceSheetItemMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.BalanceSheetItemMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, balanceSheetItemMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BalanceSheetItemMapTuple")
		case "key":

			out.Values[i] = ec._BalanceSheetItemMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._BalanceSheetItemMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cashFlowImplementors = []string{"CashFlow"}

func (ec *executionContext) _CashFlow(ctx context.Context, sel ast.SelectionSet, obj *model.CashFlow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cashFlowImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CashFlow")
		case "currency_symbol":

			out.Values[i] = ec._CashFlow_currency_symbol(ctx, field, obj)

		case "quarterly":

			out.Values[i] = ec._CashFlow_quarterly(ctx, field, obj)

		case "yearly":

			out.Values[i] = ec._CashFlow_yearly(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cashFlowItemImplementors = []string{"CashFlowItem"}

func (ec *executionContext) _CashFlowItem(ctx context.Context, sel ast.SelectionSet, obj *model.CashFlowItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cashFlowItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CashFlowItem")
		case "date":

			out.Values[i] = ec._CashFlowItem_date(ctx, field, obj)

		case "filing_date":

			out.Values[i] = ec._CashFlowItem_filing_date(ctx, field, obj)

		case "currency_symbol":

			out.Values[i] = ec._CashFlowItem_currency_symbol(ctx, field, obj)

		case "investments":

			out.Values[i] = ec._CashFlowItem_investments(ctx, field, obj)

		case "changeToLiabilities":

			out.Values[i] = ec._CashFlowItem_changeToLiabilities(ctx, field, obj)

		case "totalCashflowsFromInvestingActivities":

			out.Values[i] = ec._CashFlowItem_totalCashflowsFromInvestingActivities(ctx, field, obj)

		case "netBorrowings":

			out.Values[i] = ec._CashFlowItem_netBorrowings(ctx, field, obj)

		case "totalCashFromFinancingActivities":

			out.Values[i] = ec._CashFlowItem_totalCashFromFinancingActivities(ctx, field, obj)

		case "changeToOperatingActivities":

			out.Values[i] = ec._CashFlowItem_changeToOperatingActivities(ctx, field, obj)

		case "netIncome":

			out.Values[i] = ec._CashFlowItem_netIncome(ctx, field, obj)

		case "changeInCash":

			out.Values[i] = ec._CashFlowItem_changeInCash(ctx, field, obj)

		case "beginPeriodCashFlow":

			out.Values[i] = ec._CashFlowItem_beginPeriodCashFlow(ctx, field, obj)

		case "endPeriodCashFlow":

			out.Values[i] = ec._CashFlowItem_endPeriodCashFlow(ctx, field, obj)

		case "totalCashFromOperatingActivities":

			out.Values[i] = ec._CashFlowItem_totalCashFromOperatingActivities(ctx, field, obj)

		case "depreciation":

			out.Values[i] = ec._CashFlowItem_depreciation(ctx, field, obj)

		case "otherCashflowsFromInvestingActivities":

			out.Values[i] = ec._CashFlowItem_otherCashflowsFromInvestingActivities(ctx, field, obj)

		case "dividendsPaid":

			out.Values[i] = ec._CashFlowItem_dividendsPaid(ctx, field, obj)

		case "changeToInventory":

			out.Values[i] = ec._CashFlowItem_changeToInventory(ctx, field, obj)

		case "changeToAccountReceivables":

			out.Values[i] = ec._CashFlowItem_changeToAccountReceivables(ctx, field, obj)

		case "salePurchaseOfStock":

			out.Values[i] = ec._CashFlowItem_salePurchaseOfStock(ctx, field, obj)

		case "otherCashflowsFromFinancingActivities":

			out.Values[i] = ec._CashFlowItem_otherCashflowsFromFinancingActivities(ctx, field, obj)

		case "changeToNetincome":

			out.Values[i] = ec._CashFlowItem_changeToNetincome(ctx, field, obj)

		case "capitalExpenditures":

			out.Values[i] = ec._CashFlowItem_capitalExpenditures(ctx, field, obj)

		case "changeReceivables":

			out.Values[i] = ec._CashFlowItem_changeReceivables(ctx, field, obj)

		case "cashFlowsOtherOperating":

			out.Values[i] = ec._CashFlowItem_cashFlowsOtherOperating(ctx, field, obj)

		case "exchangeRateChanges":

			out.Values[i] = ec._CashFlowItem_exchangeRateChanges(ctx, field, obj)

		case "cashAndCashEquivalentsChanges":

			out.Values[i] = ec._CashFlowItem_cashAndCashEquivalentsChanges(ctx, field, obj)

		case "changeInWorkingCapital":

			out.Values[i] = ec._CashFlowItem_changeInWorkingCapital(ctx, field, obj)

		case "otherNonCashItems":

			out.Values[i] = ec._CashFlowItem_otherNonCashItems(ctx, field, obj)

		case "freeCashFlow":

			out.Values[i] = ec._CashFlowItem_freeCashFlow(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cashFlowItemMapTupleImplementors = []string{"CashFlowItemMapTuple"}

func (ec *executionContext) _CashFlowItemMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.CashFlowItemMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cashFlowItemMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CashFlowItemMapTuple")
		case "key":

			out.Values[i] = ec._CashFlowItemMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._CashFlowItemMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eSGScoresImplementors = []string{"ESGScores"}

func (ec *executionContext) _ESGScores(ctx context.Context, sel ast.SelectionSet, obj *model.ESGScores) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eSGScoresImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ESGScores")
		case "Disclaimer":

			out.Values[i] = ec._ESGScores_Disclaimer(ctx, field, obj)

		case "RatingDate":

			out.Values[i] = ec._ESGScores_RatingDate(ctx, field, obj)

		case "TotalEsg":

			out.Values[i] = ec._ESGScores_TotalEsg(ctx, field, obj)

		case "TotalEsgPercentile":

			out.Values[i] = ec._ESGScores_TotalEsgPercentile(ctx, field, obj)

		case "EnvironmentScore":

			out.Values[i] = ec._ESGScores_EnvironmentScore(ctx, field, obj)

		case "EnvironmentScorePercentile":

			out.Values[i] = ec._ESGScores_EnvironmentScorePercentile(ctx, field, obj)

		case "SocialScore":

			out.Values[i] = ec._ESGScores_SocialScore(ctx, field, obj)

		case "SocialScorePercentile":

			out.Values[i] = ec._ESGScores_SocialScorePercentile(ctx, field, obj)

		case "GovernanceScore":

			out.Values[i] = ec._ESGScores_GovernanceScore(ctx, field, obj)

		case "GovernanceScorePercentile":

			out.Values[i] = ec._ESGScores_GovernanceScorePercentile(ctx, field, obj)

		case "ControversyLevel":

			out.Values[i] = ec._ESGScores_ControversyLevel(ctx, field, obj)

		case "ActivitiesInvolvement":

			out.Values[i] = ec._ESGScores_ActivitiesInvolvement(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var earningsImplementors = []string{"Earnings"}

func (ec *executionContext) _Earnings(ctx context.Context, sel ast.SelectionSet, obj *model.Earnings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, earningsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Earnings")
		case "History":

			out.Values[i] = ec._Earnings_History(ctx, field, obj)

		case "Trend":

			out.Values[i] = ec._Earnings_Trend(ctx, field, obj)

		case "Annual":

			out.Values[i] = ec._Earnings_Annual(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var equityFundamentalsImplementors = []string{"EquityFundamentals"}

func (ec *executionContext) _EquityFundamentals(ctx context.Context, sel ast.SelectionSet, obj *model.EquityFundamentals) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, equityFundamentalsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EquityFundamentals")
		case "General":

			out.Values[i] = ec._EquityFundamentals_General(ctx, field, obj)

		case "Highlights":

			out.Values[i] = ec._EquityFundamentals_Highlights(ctx, field, obj)

		case "Valuation":

			out.Values[i] = ec._EquityFundamentals_Valuation(ctx, field, obj)

		case "SharesStats":

			out.Values[i] = ec._EquityFundamentals_SharesStats(ctx, field, obj)

		case "Technicals":

			out.Values[i] = ec._EquityFundamentals_Technicals(ctx, field, obj)

		case "SplitsDividends":

			out.Values[i] = ec._EquityFundamentals_SplitsDividends(ctx, field, obj)

		case "AnalystRatings":

			out.Values[i] = ec._EquityFundamentals_AnalystRatings(ctx, field, obj)

		case "Holders":

			out.Values[i] = ec._EquityFundamentals_Holders(ctx, field, obj)

		case "InsiderTransactions":

			out.Values[i] = ec._EquityFundamentals_InsiderTransactions(ctx, field, obj)

		case "ESGScores":

			out.Values[i] = ec._EquityFundamentals_ESGScores(ctx, field, obj)

		case "OutstandingShares":

			out.Values[i] = ec._EquityFundamentals_OutstandingShares(ctx, field, obj)

		case "Earnings":

			out.Values[i] = ec._EquityFundamentals_Earnings(ctx, field, obj)

		case "Financials":

			out.Values[i] = ec._EquityFundamentals_Financials(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var financialsImplementors = []string{"Financials"}

func (ec *executionContext) _Financials(ctx context.Context, sel ast.SelectionSet, obj *model.Financials) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, financialsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Financials")
		case "Balance_Sheet":

			out.Values[i] = ec._Financials_Balance_Sheet(ctx, field, obj)

		case "Cash_Flow":

			out.Values[i] = ec._Financials_Cash_Flow(ctx, field, obj)

		case "Income_Statement":

			out.Values[i] = ec._Financials_Income_Statement(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var generalImplementors = []string{"General"}

func (ec *executionContext) _General(ctx context.Context, sel ast.SelectionSet, obj *model.General) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generalImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("General")
		case "Code":

			out.Values[i] = ec._General_Code(ctx, field, obj)

		case "Type":

			out.Values[i] = ec._General_Type(ctx, field, obj)

		case "Name":

			out.Values[i] = ec._General_Name(ctx, field, obj)

		case "Exchange":

			out.Values[i] = ec._General_Exchange(ctx, field, obj)

		case "CurrencyCode":

			out.Values[i] = ec._General_CurrencyCode(ctx, field, obj)

		case "CurrencyName":

			out.Values[i] = ec._General_CurrencyName(ctx, field, obj)

		case "CurrencySymbol":

			out.Values[i] = ec._General_CurrencySymbol(ctx, field, obj)

		case "CountryName":

			out.Values[i] = ec._General_CountryName(ctx, field, obj)

		case "EmployerIdNumber":

			out.Values[i] = ec._General_EmployerIdNumber(ctx, field, obj)

		case "FiscalYearEnd":

			out.Values[i] = ec._General_FiscalYearEnd(ctx, field, obj)

		case "InternationalDomestic":

			out.Values[i] = ec._General_InternationalDomestic(ctx, field, obj)

		case "Sector":

			out.Values[i] = ec._General_Sector(ctx, field, obj)

		case "Industry":

			out.Values[i] = ec._General_Industry(ctx, field, obj)

		case "GicSector":

			out.Values[i] = ec._General_GicSector(ctx, field, obj)

		case "GicGroup":

			out.Values[i] = ec._General_GicGroup(ctx, field, obj)

		case "GicIndustry":

			out.Values[i] = ec._General_GicIndustry(ctx, field, obj)

		case "GicSubIndustry":

			out.Values[i] = ec._General_GicSubIndustry(ctx, field, obj)

		case "HomeCategory":

			out.Values[i] = ec._General_HomeCategory(ctx, field, obj)

		case "IsDelisted":

			out.Values[i] = ec._General_IsDelisted(ctx, field, obj)

		case "Description":

			out.Values[i] = ec._General_Description(ctx, field, obj)

		case "Address":

			out.Values[i] = ec._General_Address(ctx, field, obj)

		case "AddressData":

			out.Values[i] = ec._General_AddressData(ctx, field, obj)

		case "Listings":

			out.Values[i] = ec._General_Listings(ctx, field, obj)

		case "Officers":

			out.Values[i] = ec._General_Officers(ctx, field, obj)

		case "Phone":

			out.Values[i] = ec._General_Phone(ctx, field, obj)

		case "FullTimeEmployees":

			out.Values[i] = ec._General_FullTimeEmployees(ctx, field, obj)

		case "UpdatedAt":

			out.Values[i] = ec._General_UpdatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var highlightsImplementors = []string{"Highlights"}

func (ec *executionContext) _Highlights(ctx context.Context, sel ast.SelectionSet, obj *model.Highlights) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, highlightsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Highlights")
		case "MarketCapitalization":

			out.Values[i] = ec._Highlights_MarketCapitalization(ctx, field, obj)

		case "MarketCapitalizationMln":

			out.Values[i] = ec._Highlights_MarketCapitalizationMln(ctx, field, obj)

		case "WallStreetTargetPrice":

			out.Values[i] = ec._Highlights_WallStreetTargetPrice(ctx, field, obj)

		case "BookValue":

			out.Values[i] = ec._Highlights_BookValue(ctx, field, obj)

		case "DividendShare":

			out.Values[i] = ec._Highlights_DividendShare(ctx, field, obj)

		case "DividendYield":

			out.Values[i] = ec._Highlights_DividendYield(ctx, field, obj)

		case "EarningsShare":

			out.Values[i] = ec._Highlights_EarningsShare(ctx, field, obj)

		case "MostRecentQuarter":

			out.Values[i] = ec._Highlights_MostRecentQuarter(ctx, field, obj)

		case "ProfitMargin":

			out.Values[i] = ec._Highlights_ProfitMargin(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var historyImplementors = []string{"History"}

func (ec *executionContext) _History(ctx context.Context, sel ast.SelectionSet, obj *model.History) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("History")
		case "reportDate":

			out.Values[i] = ec._History_reportDate(ctx, field, obj)

		case "date":

			out.Values[i] = ec._History_date(ctx, field, obj)

		case "beforeAfterMarket":

			out.Values[i] = ec._History_beforeAfterMarket(ctx, field, obj)

		case "currency":

			out.Values[i] = ec._History_currency(ctx, field, obj)

		case "epsActual":

			out.Values[i] = ec._History_epsActual(ctx, field, obj)

		case "epsEstimate":

			out.Values[i] = ec._History_epsEstimate(ctx, field, obj)

		case "epsDifference":

			out.Values[i] = ec._History_epsDifference(ctx, field, obj)

		case "surprisePercent":

			out.Values[i] = ec._History_surprisePercent(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var historyMapTupleImplementors = []string{"HistoryMapTuple"}

func (ec *executionContext) _HistoryMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.HistoryMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historyMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistoryMapTuple")
		case "key":

			out.Values[i] = ec._HistoryMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._HistoryMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var holdersImplementors = []string{"Holders"}

func (ec *executionContext) _Holders(ctx context.Context, sel ast.SelectionSet, obj *model.Holders) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, holdersImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Holders")
		case "Institutions":

			out.Values[i] = ec._Holders_Institutions(ctx, field, obj)

		case "Funds":

			out.Values[i] = ec._Holders_Funds(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var incomeStatementImplementors = []string{"IncomeStatement"}

func (ec *executionContext) _IncomeStatement(ctx context.Context, sel ast.SelectionSet, obj *model.IncomeStatement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, incomeStatementImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IncomeStatement")
		case "currency_symbol":

			out.Values[i] = ec._IncomeStatement_currency_symbol(ctx, field, obj)

		case "quarterly":

			out.Values[i] = ec._IncomeStatement_quarterly(ctx, field, obj)

		case "yearly":

			out.Values[i] = ec._IncomeStatement_yearly(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var incomeStatementItemImplementors = []string{"IncomeStatementItem"}

func (ec *executionContext) _IncomeStatementItem(ctx context.Context, sel ast.SelectionSet, obj *model.IncomeStatementItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, incomeStatementItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IncomeStatementItem")
		case "date":

			out.Values[i] = ec._IncomeStatementItem_date(ctx, field, obj)

		case "filing_date":

			out.Values[i] = ec._IncomeStatementItem_filing_date(ctx, field, obj)

		case "currency_symbol":

			out.Values[i] = ec._IncomeStatementItem_currency_symbol(ctx, field, obj)

		case "researchDevelopment":

			out.Values[i] = ec._IncomeStatementItem_researchDevelopment(ctx, field, obj)

		case "effectOfAccountingCharges":

			out.Values[i] = ec._IncomeStatementItem_effectOfAccountingCharges(ctx, field, obj)

		case "incomeBeforeTax":

			out.Values[i] = ec._IncomeStatementItem_incomeBeforeTax(ctx, field, obj)

		case "minorityInterest":

			out.Values[i] = ec._IncomeStatementItem_minorityInterest(ctx, field, obj)

		case "netIncome":

			out.Values[i] = ec._IncomeStatementItem_netIncome(ctx, field, obj)

		case "sellingGeneralAdministrative":

			out.Values[i] = ec._IncomeStatementItem_sellingGeneralAdministrative(ctx, field, obj)

		case "sellingAndMarketingExpenses":

			out.Values[i] = ec._IncomeStatementItem_sellingAndMarketingExpenses(ctx, field, obj)

		case "grossProfit":

			out.Values[i] = ec._IncomeStatementItem_grossProfit(ctx, field, obj)

		case "reconciledDepreciation":

			out.Values[i] = ec._IncomeStatementItem_reconciledDepreciation(ctx, field, obj)

		case "ebit":

			out.Values[i] = ec._IncomeStatementItem_ebit(ctx, field, obj)

		case "ebitda":

			out.Values[i] = ec._IncomeStatementItem_ebitda(ctx, field, obj)

		case "depreciationAndAmortization":

			out.Values[i] = ec._IncomeStatementItem_depreciationAndAmortization(ctx, field, obj)

		case "nonOperatingIncomeNetOther":

			out.Values[i] = ec._IncomeStatementItem_nonOperatingIncomeNetOther(ctx, field, obj)

		case "operatingIncome":

			out.Values[i] = ec._IncomeStatementItem_operatingIncome(ctx, field, obj)

		case "otherOperatingExpenses":

			out.Values[i] = ec._IncomeStatementItem_otherOperatingExpenses(ctx, field, obj)

		case "interestExpense":

			out.Values[i] = ec._IncomeStatementItem_interestExpense(ctx, field, obj)

		case "taxProvision":

			out.Values[i] = ec._IncomeStatementItem_taxProvision(ctx, field, obj)

		case "interestIncome":

			out.Values[i] = ec._IncomeStatementItem_interestIncome(ctx, field, obj)

		case "netInterestIncome":

			out.Values[i] = ec._IncomeStatementItem_netInterestIncome(ctx, field, obj)

		case "extraordinaryItems":

			out.Values[i] = ec._IncomeStatementItem_extraordinaryItems(ctx, field, obj)

		case "nonRecurring":

			out.Values[i] = ec._IncomeStatementItem_nonRecurring(ctx, field, obj)

		case "otherItems":

			out.Values[i] = ec._IncomeStatementItem_otherItems(ctx, field, obj)

		case "incomeTaxExpense":

			out.Values[i] = ec._IncomeStatementItem_incomeTaxExpense(ctx, field, obj)

		case "totalRevenue":

			out.Values[i] = ec._IncomeStatementItem_totalRevenue(ctx, field, obj)

		case "totalOperatingExpenses":

			out.Values[i] = ec._IncomeStatementItem_totalOperatingExpenses(ctx, field, obj)

		case "costOfRevenue":

			out.Values[i] = ec._IncomeStatementItem_costOfRevenue(ctx, field, obj)

		case "totalOtherIncomeExpenseNet":

			out.Values[i] = ec._IncomeStatementItem_totalOtherIncomeExpenseNet(ctx, field, obj)

		case "discontinuedOperations":

			out.Values[i] = ec._IncomeStatementItem_discontinuedOperations(ctx, field, obj)

		case "netIncomeFromContinuingOps":

			out.Values[i] = ec._IncomeStatementItem_netIncomeFromContinuingOps(ctx, field, obj)

		case "netIncomeApplicableToCommonShares":

			out.Values[i] = ec._IncomeStatementItem_netIncomeApplicableToCommonShares(ctx, field, obj)

		case "preferredStockAndOtherAdjustments":

			out.Values[i] = ec._IncomeStatementItem_preferredStockAndOtherAdjustments(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var incomeStatementItemMapTupleImplementors = []string{"IncomeStatementItemMapTuple"}

func (ec *executionContext) _IncomeStatementItemMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.IncomeStatementItemMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, incomeStatementItemMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IncomeStatementItemMapTuple")
		case "key":

			out.Values[i] = ec._IncomeStatementItemMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._IncomeStatementItemMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var insiderTransactionImplementors = []string{"InsiderTransaction"}

func (ec *executionContext) _InsiderTransaction(ctx context.Context, sel ast.SelectionSet, obj *model.InsiderTransaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, insiderTransactionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InsiderTransaction")
		case "date":

			out.Values[i] = ec._InsiderTransaction_date(ctx, field, obj)

		case "ownerCik":

			out.Values[i] = ec._InsiderTransaction_ownerCik(ctx, field, obj)

		case "ownerName":

			out.Values[i] = ec._InsiderTransaction_ownerName(ctx, field, obj)

		case "transactionDate":

			out.Values[i] = ec._InsiderTransaction_transactionDate(ctx, field, obj)

		case "transactionCode":

			out.Values[i] = ec._InsiderTransaction_transactionCode(ctx, field, obj)

		case "transactionAmount":

			out.Values[i] = ec._InsiderTransaction_transactionAmount(ctx, field, obj)

		case "transactionPrice":

			out.Values[i] = ec._InsiderTransaction_transactionPrice(ctx, field, obj)

		case "transactionAcquiredDisposed":

			out.Values[i] = ec._InsiderTransaction_transactionAcquiredDisposed(ctx, field, obj)

		case "postTransactionAmount":

			out.Values[i] = ec._InsiderTransaction_postTransactionAmount(ctx, field, obj)

		case "secLink":

			out.Values[i] = ec._InsiderTransaction_secLink(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var insiderTransactionMapTupleImplementors = []string{"InsiderTransactionMapTuple"}

func (ec *executionContext) _InsiderTransactionMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.InsiderTransactionMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, insiderTransactionMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InsiderTransactionMapTuple")
		case "key":

			out.Values[i] = ec._InsiderTransactionMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._InsiderTransactionMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var institutionImplementors = []string{"Institution"}

func (ec *executionContext) _Institution(ctx context.Context, sel ast.SelectionSet, obj *model.Institution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, institutionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Institution")
		case "name":

			out.Values[i] = ec._Institution_name(ctx, field, obj)

		case "date":

			out.Values[i] = ec._Institution_date(ctx, field, obj)

		case "totalShares":

			out.Values[i] = ec._Institution_totalShares(ctx, field, obj)

		case "totalAssets":

			out.Values[i] = ec._Institution_totalAssets(ctx, field, obj)

		case "currentShares":

			out.Values[i] = ec._Institution_currentShares(ctx, field, obj)

		case "change":

			out.Values[i] = ec._Institution_change(ctx, field, obj)

		case "change_p":

			out.Values[i] = ec._Institution_change_p(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var institutionMapTupleImplementors = []string{"InstitutionMapTuple"}

func (ec *executionContext) _InstitutionMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.InstitutionMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, institutionMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InstitutionMapTuple")
		case "key":

			out.Values[i] = ec._InstitutionMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._InstitutionMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listingImplementors = []string{"Listing"}

func (ec *executionContext) _Listing(ctx context.Context, sel ast.SelectionSet, obj *model.Listing) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Listing")
		case "Code":

			out.Values[i] = ec._Listing_Code(ctx, field, obj)

		case "Exchange":

			out.Values[i] = ec._Listing_Exchange(ctx, field, obj)

		case "Name":

			out.Values[i] = ec._Listing_Name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listingMapImplementors = []string{"ListingMap"}

func (ec *executionContext) _ListingMap(ctx context.Context, sel ast.SelectionSet, obj *model.ListingMap) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listingMapImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListingMap")
		case "item_number":

			out.Values[i] = ec._ListingMap_item_number(ctx, field, obj)

		case "value":

			out.Values[i] = ec._ListingMap_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var numberDividendsByYearImplementors = []string{"NumberDividendsByYear"}

func (ec *executionContext) _NumberDividendsByYear(ctx context.Context, sel ast.SelectionSet, obj *model.NumberDividendsByYear) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, numberDividendsByYearImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NumberDividendsByYear")
		case "Year":

			out.Values[i] = ec._NumberDividendsByYear_Year(ctx, field, obj)

		case "Count":

			out.Values[i] = ec._NumberDividendsByYear_Count(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var numberDividendsByYearMapTupleImplementors = []string{"NumberDividendsByYearMapTuple"}

func (ec *executionContext) _NumberDividendsByYearMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.NumberDividendsByYearMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, numberDividendsByYearMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NumberDividendsByYearMapTuple")
		case "key":

			out.Values[i] = ec._NumberDividendsByYearMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._NumberDividendsByYearMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var officerImplementors = []string{"Officer"}

func (ec *executionContext) _Officer(ctx context.Context, sel ast.SelectionSet, obj *model.Officer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, officerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Officer")
		case "Name":

			out.Values[i] = ec._Officer_Name(ctx, field, obj)

		case "Title":

			out.Values[i] = ec._Officer_Title(ctx, field, obj)

		case "YearBorn":

			out.Values[i] = ec._Officer_YearBorn(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var officerMapImplementors = []string{"OfficerMap"}

func (ec *executionContext) _OfficerMap(ctx context.Context, sel ast.SelectionSet, obj *model.OfficerMap) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, officerMapImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfficerMap")
		case "item_number":

			out.Values[i] = ec._OfficerMap_item_number(ctx, field, obj)

		case "value":

			out.Values[i] = ec._OfficerMap_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var outstandingSharesImplementors = []string{"OutstandingShares"}

func (ec *executionContext) _OutstandingShares(ctx context.Context, sel ast.SelectionSet, obj *model.OutstandingShares) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, outstandingSharesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OutstandingShares")
		case "annual":

			out.Values[i] = ec._OutstandingShares_annual(ctx, field, obj)

		case "quarterly":

			out.Values[i] = ec._OutstandingShares_quarterly(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var quarterlyImplementors = []string{"Quarterly"}

func (ec *executionContext) _Quarterly(ctx context.Context, sel ast.SelectionSet, obj *model.Quarterly) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quarterlyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Quarterly")
		case "date":

			out.Values[i] = ec._Quarterly_date(ctx, field, obj)

		case "dateFormatted":

			out.Values[i] = ec._Quarterly_dateFormatted(ctx, field, obj)

		case "sharesMln":

			out.Values[i] = ec._Quarterly_sharesMln(ctx, field, obj)

		case "shares":

			out.Values[i] = ec._Quarterly_shares(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var quarterlyMapTupleImplementors = []string{"QuarterlyMapTuple"}

func (ec *executionContext) _QuarterlyMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.QuarterlyMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quarterlyMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuarterlyMapTuple")
		case "key":

			out.Values[i] = ec._QuarterlyMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._QuarterlyMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getFundamentals":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getFundamentals(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sharesStatsImplementors = []string{"SharesStats"}

func (ec *executionContext) _SharesStats(ctx context.Context, sel ast.SelectionSet, obj *model.SharesStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sharesStatsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SharesStats")
		case "SharesOutstanding":

			out.Values[i] = ec._SharesStats_SharesOutstanding(ctx, field, obj)

		case "SharesFloat":

			out.Values[i] = ec._SharesStats_SharesFloat(ctx, field, obj)

		case "PercentInsiders":

			out.Values[i] = ec._SharesStats_PercentInsiders(ctx, field, obj)

		case "PercentInstitutions":

			out.Values[i] = ec._SharesStats_PercentInstitutions(ctx, field, obj)

		case "SharesShort":

			out.Values[i] = ec._SharesStats_SharesShort(ctx, field, obj)

		case "SharesShortPriorMonth":

			out.Values[i] = ec._SharesStats_SharesShortPriorMonth(ctx, field, obj)

		case "ShortRatio":

			out.Values[i] = ec._SharesStats_ShortRatio(ctx, field, obj)

		case "ShortPercentOutstanding":

			out.Values[i] = ec._SharesStats_ShortPercentOutstanding(ctx, field, obj)

		case "ShortPercentFloat":

			out.Values[i] = ec._SharesStats_ShortPercentFloat(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var splitsDividendsImplementors = []string{"SplitsDividends"}

func (ec *executionContext) _SplitsDividends(ctx context.Context, sel ast.SelectionSet, obj *model.SplitsDividends) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, splitsDividendsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SplitsDividends")
		case "ForwardAnnualDividendRate":

			out.Values[i] = ec._SplitsDividends_ForwardAnnualDividendRate(ctx, field, obj)

		case "ForwardAnnualDividendYield":

			out.Values[i] = ec._SplitsDividends_ForwardAnnualDividendYield(ctx, field, obj)

		case "PayoutRatio":

			out.Values[i] = ec._SplitsDividends_PayoutRatio(ctx, field, obj)

		case "DividendDate":

			out.Values[i] = ec._SplitsDividends_DividendDate(ctx, field, obj)

		case "ExDividendDate":

			out.Values[i] = ec._SplitsDividends_ExDividendDate(ctx, field, obj)

		case "LastSplitFactor":

			out.Values[i] = ec._SplitsDividends_LastSplitFactor(ctx, field, obj)

		case "LastSplitDate":

			out.Values[i] = ec._SplitsDividends_LastSplitDate(ctx, field, obj)

		case "NumberDividendsByYear":

			out.Values[i] = ec._SplitsDividends_NumberDividendsByYear(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var technicalsImplementors = []string{"Technicals"}

func (ec *executionContext) _Technicals(ctx context.Context, sel ast.SelectionSet, obj *model.Technicals) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, technicalsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Technicals")
		case "Beta":

			out.Values[i] = ec._Technicals_Beta(ctx, field, obj)

		case "WeekHigh52":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Technicals_WeekHigh52(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "WeekLow52":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Technicals_WeekLow52(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "DayMA50":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Technicals_DayMA50(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "DayMA200":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Technicals_DayMA200(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "SharesShort":

			out.Values[i] = ec._Technicals_SharesShort(ctx, field, obj)

		case "SharesShortPriorMonth":

			out.Values[i] = ec._Technicals_SharesShortPriorMonth(ctx, field, obj)

		case "ShortRatio":

			out.Values[i] = ec._Technicals_ShortRatio(ctx, field, obj)

		case "ShortPercent":

			out.Values[i] = ec._Technicals_ShortPercent(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendImplementors = []string{"Trend"}

func (ec *executionContext) _Trend(ctx context.Context, sel ast.SelectionSet, obj *model.Trend) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Trend")
		case "date":

			out.Values[i] = ec._Trend_date(ctx, field, obj)

		case "period":

			out.Values[i] = ec._Trend_period(ctx, field, obj)

		case "growth":

			out.Values[i] = ec._Trend_growth(ctx, field, obj)

		case "earningsEstimateAvg":

			out.Values[i] = ec._Trend_earningsEstimateAvg(ctx, field, obj)

		case "earningsEstimateLow":

			out.Values[i] = ec._Trend_earningsEstimateLow(ctx, field, obj)

		case "earningsEstimateHigh":

			out.Values[i] = ec._Trend_earningsEstimateHigh(ctx, field, obj)

		case "earningsEstimateYearAgoEps":

			out.Values[i] = ec._Trend_earningsEstimateYearAgoEps(ctx, field, obj)

		case "earningsEstimateNumberOfAnalysts":

			out.Values[i] = ec._Trend_earningsEstimateNumberOfAnalysts(ctx, field, obj)

		case "earningsEstimateGrowth":

			out.Values[i] = ec._Trend_earningsEstimateGrowth(ctx, field, obj)

		case "revenueEstimateAvg":

			out.Values[i] = ec._Trend_revenueEstimateAvg(ctx, field, obj)

		case "revenueEstimateLow":

			out.Values[i] = ec._Trend_revenueEstimateLow(ctx, field, obj)

		case "revenueEstimateHigh":

			out.Values[i] = ec._Trend_revenueEstimateHigh(ctx, field, obj)

		case "revenueEstimateYearAgoEps":

			out.Values[i] = ec._Trend_revenueEstimateYearAgoEps(ctx, field, obj)

		case "revenueEstimateNumberOfAnalysts":

			out.Values[i] = ec._Trend_revenueEstimateNumberOfAnalysts(ctx, field, obj)

		case "revenueEstimateGrowth":

			out.Values[i] = ec._Trend_revenueEstimateGrowth(ctx, field, obj)

		case "epsTrendCurrent":

			out.Values[i] = ec._Trend_epsTrendCurrent(ctx, field, obj)

		case "epsTrend7daysAgo":

			out.Values[i] = ec._Trend_epsTrend7daysAgo(ctx, field, obj)

		case "epsTrend30daysAgo":

			out.Values[i] = ec._Trend_epsTrend30daysAgo(ctx, field, obj)

		case "epsTrend60daysAgo":

			out.Values[i] = ec._Trend_epsTrend60daysAgo(ctx, field, obj)

		case "epsTrend90daysAgo":

			out.Values[i] = ec._Trend_epsTrend90daysAgo(ctx, field, obj)

		case "epsRevisionsUpLast7days":

			out.Values[i] = ec._Trend_epsRevisionsUpLast7days(ctx, field, obj)

		case "epsRevisionsUpLast30days":

			out.Values[i] = ec._Trend_epsRevisionsUpLast30days(ctx, field, obj)

		case "epsRevisionsDownLast7days":

			out.Values[i] = ec._Trend_epsRevisionsDownLast7days(ctx, field, obj)

		case "epsRevisionsDownLast30days":

			out.Values[i] = ec._Trend_epsRevisionsDownLast30days(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendMapTupleImplementors = []string{"TrendMapTuple"}

func (ec *executionContext) _TrendMapTuple(ctx context.Context, sel ast.SelectionSet, obj *model.TrendMapTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendMapTupleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendMapTuple")
		case "key":

			out.Values[i] = ec._TrendMapTuple_key(ctx, field, obj)

		case "value":

			out.Values[i] = ec._TrendMapTuple_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var valuationImplementors = []string{"Valuation"}

func (ec *executionContext) _Valuation(ctx context.Context, sel ast.SelectionSet, obj *model.Valuation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, valuationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Valuation")
		case "EnterpriseValue":

			out.Values[i] = ec._Valuation_EnterpriseValue(ctx, field, obj)

		case "EnterpriseValueRevenue":

			out.Values[i] = ec._Valuation_EnterpriseValueRevenue(ctx, field, obj)

		case "EnterpriseValueEbitda":

			out.Values[i] = ec._Valuation_EnterpriseValueEbitda(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNEquityFundamentals2gqlgenᚑcapeᚋgraphᚋmodelᚐEquityFundamentals(ctx context.Context, sel ast.SelectionSet, v model.EquityFundamentals) graphql.Marshaler {
	return ec._EquityFundamentals(ctx, sel, &v)
}

func (ec *executionContext) marshalNEquityFundamentals2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐEquityFundamentals(ctx context.Context, sel ast.SelectionSet, v *model.EquityFundamentals) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EquityFundamentals(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOActivityInvolvement2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐActivityInvolvement(ctx context.Context, sel ast.SelectionSet, v []*model.ActivityInvolvement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOActivityInvolvement2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐActivityInvolvement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOActivityInvolvement2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐActivityInvolvement(ctx context.Context, sel ast.SelectionSet, v *model.ActivityInvolvement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActivityInvolvement(ctx, sel, v)
}

func (ec *executionContext) marshalOAddressData2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAddressData(ctx context.Context, sel ast.SelectionSet, v *model.AddressData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddressData(ctx, sel, v)
}

func (ec *executionContext) marshalOAnalystRatings2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnalystRatings(ctx context.Context, sel ast.SelectionSet, v *model.AnalystRatings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnalystRatings(ctx, sel, v)
}

func (ec *executionContext) marshalOAnnual2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnual(ctx context.Context, sel ast.SelectionSet, v *model.Annual) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Annual(ctx, sel, v)
}

func (ec *executionContext) marshalOAnnualEarnings2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualEarnings(ctx context.Context, sel ast.SelectionSet, v *model.AnnualEarnings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnnualEarnings(ctx, sel, v)
}

func (ec *executionContext) marshalOAnnualEarningsMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualEarningsMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.AnnualEarningsMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnnualEarningsMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualEarningsMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAnnualEarningsMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualEarningsMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.AnnualEarningsMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnnualEarningsMapTuple(ctx, sel, v)
}

func (ec *executionContext) marshalOAnnualMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.AnnualMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnnualMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAnnualMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐAnnualMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.AnnualMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnnualMapTuple(ctx, sel, v)
}

func (ec *executionContext) marshalOBalanceSheet2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐBalanceSheet(ctx context.Context, sel ast.SelectionSet, v *model.BalanceSheet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BalanceSheet(ctx, sel, v)
}

func (ec *executionContext) marshalOBalanceSheetItem2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐBalanceSheetItem(ctx context.Context, sel ast.SelectionSet, v *model.BalanceSheetItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BalanceSheetItem(ctx, sel, v)
}

func (ec *executionContext) marshalOBalanceSheetItemMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐBalanceSheetItemMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.BalanceSheetItemMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBalanceSheetItemMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐBalanceSheetItemMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBalanceSheetItemMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐBalanceSheetItemMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.BalanceSheetItemMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BalanceSheetItemMapTuple(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCashFlow2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐCashFlow(ctx context.Context, sel ast.SelectionSet, v *model.CashFlow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CashFlow(ctx, sel, v)
}

func (ec *executionContext) marshalOCashFlowItem2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐCashFlowItem(ctx context.Context, sel ast.SelectionSet, v *model.CashFlowItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CashFlowItem(ctx, sel, v)
}

func (ec *executionContext) marshalOCashFlowItemMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐCashFlowItemMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.CashFlowItemMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCashFlowItemMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐCashFlowItemMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCashFlowItemMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐCashFlowItemMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.CashFlowItemMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CashFlowItemMapTuple(ctx, sel, v)
}

func (ec *executionContext) marshalOESGScores2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐESGScores(ctx context.Context, sel ast.SelectionSet, v *model.ESGScores) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ESGScores(ctx, sel, v)
}

func (ec *executionContext) marshalOEarnings2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐEarnings(ctx context.Context, sel ast.SelectionSet, v *model.Earnings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Earnings(ctx, sel, v)
}

func (ec *executionContext) marshalOFinancials2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐFinancials(ctx context.Context, sel ast.SelectionSet, v *model.Financials) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Financials(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGeneral2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐGeneral(ctx context.Context, sel ast.SelectionSet, v *model.General) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._General(ctx, sel, v)
}

func (ec *executionContext) marshalOHighlights2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHighlights(ctx context.Context, sel ast.SelectionSet, v *model.Highlights) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Highlights(ctx, sel, v)
}

func (ec *executionContext) marshalOHistory2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHistory(ctx context.Context, sel ast.SelectionSet, v *model.History) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._History(ctx, sel, v)
}

func (ec *executionContext) marshalOHistoryMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHistoryMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.HistoryMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHistoryMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHistoryMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHistoryMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHistoryMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.HistoryMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HistoryMapTuple(ctx, sel, v)
}

func (ec *executionContext) marshalOHolders2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐHolders(ctx context.Context, sel ast.SelectionSet, v *model.Holders) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Holders(ctx, sel, v)
}

func (ec *executionContext) marshalOIncomeStatement2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐIncomeStatement(ctx context.Context, sel ast.SelectionSet, v *model.IncomeStatement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IncomeStatement(ctx, sel, v)
}

func (ec *executionContext) marshalOIncomeStatementItem2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐIncomeStatementItem(ctx context.Context, sel ast.SelectionSet, v *model.IncomeStatementItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IncomeStatementItem(ctx, sel, v)
}

func (ec *executionContext) marshalOIncomeStatementItemMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐIncomeStatementItemMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.IncomeStatementItemMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIncomeStatementItemMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐIncomeStatementItemMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOIncomeStatementItemMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐIncomeStatementItemMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.IncomeStatementItemMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IncomeStatementItemMapTuple(ctx, sel, v)
}

func (ec *executionContext) marshalOInsiderTransaction2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInsiderTransaction(ctx context.Context, sel ast.SelectionSet, v *model.InsiderTransaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InsiderTransaction(ctx, sel, v)
}

func (ec *executionContext) marshalOInsiderTransactionMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInsiderTransactionMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.InsiderTransactionMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InsiderTransactionMapTuple(ctx, sel, v)
}

func (ec *executionContext) marshalOInstitution2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInstitution(ctx context.Context, sel ast.SelectionSet, v *model.Institution) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Institution(ctx, sel, v)
}

func (ec *executionContext) marshalOInstitutionMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInstitutionMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.InstitutionMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOInstitutionMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInstitutionMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOInstitutionMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐInstitutionMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.InstitutionMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InstitutionMapTuple(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOListing2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐListing(ctx context.Context, sel ast.SelectionSet, v *model.Listing) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Listing(ctx, sel, v)
}

func (ec *executionContext) marshalOListingMap2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐListingMap(ctx context.Context, sel ast.SelectionSet, v *model.ListingMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListingMap(ctx, sel, v)
}

func (ec *executionContext) marshalONumberDividendsByYear2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐNumberDividendsByYear(ctx context.Context, sel ast.SelectionSet, v *model.NumberDividendsByYear) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NumberDividendsByYear(ctx, sel, v)
}

func (ec *executionContext) marshalONumberDividendsByYearMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐNumberDividendsByYearMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.NumberDividendsByYearMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONumberDividendsByYearMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐNumberDividendsByYearMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalONumberDividendsByYearMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐNumberDividendsByYearMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.NumberDividendsByYearMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NumberDividendsByYearMapTuple(ctx, sel, v)
}

func (ec *executionContext) marshalOOfficer2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐOfficer(ctx context.Context, sel ast.SelectionSet, v *model.Officer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Officer(ctx, sel, v)
}

func (ec *executionContext) marshalOOfficerMap2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐOfficerMap(ctx context.Context, sel ast.SelectionSet, v *model.OfficerMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfficerMap(ctx, sel, v)
}

func (ec *executionContext) marshalOOutstandingShares2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐOutstandingShares(ctx context.Context, sel ast.SelectionSet, v *model.OutstandingShares) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OutstandingShares(ctx, sel, v)
}

func (ec *executionContext) marshalOQuarterly2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐQuarterly(ctx context.Context, sel ast.SelectionSet, v *model.Quarterly) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Quarterly(ctx, sel, v)
}

func (ec *executionContext) marshalOQuarterlyMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐQuarterlyMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.QuarterlyMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQuarterlyMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐQuarterlyMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOQuarterlyMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐQuarterlyMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.QuarterlyMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QuarterlyMapTuple(ctx, sel, v)
}

func (ec *executionContext) marshalOSharesStats2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐSharesStats(ctx context.Context, sel ast.SelectionSet, v *model.SharesStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SharesStats(ctx, sel, v)
}

func (ec *executionContext) marshalOSplitsDividends2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐSplitsDividends(ctx context.Context, sel ast.SelectionSet, v *model.SplitsDividends) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SplitsDividends(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTechnicals2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐTechnicals(ctx context.Context, sel ast.SelectionSet, v *model.Technicals) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Technicals(ctx, sel, v)
}

func (ec *executionContext) marshalOTrend2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐTrend(ctx context.Context, sel ast.SelectionSet, v *model.Trend) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Trend(ctx, sel, v)
}

func (ec *executionContext) marshalOTrendMapTuple2ᚕᚖgqlgenᚑcapeᚋgraphᚋmodelᚐTrendMapTuple(ctx context.Context, sel ast.SelectionSet, v []*model.TrendMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTrendMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐTrendMapTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTrendMapTuple2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐTrendMapTuple(ctx context.Context, sel ast.SelectionSet, v *model.TrendMapTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrendMapTuple(ctx, sel, v)
}

func (ec *executionContext) marshalOValuation2ᚖgqlgenᚑcapeᚋgraphᚋmodelᚐValuation(ctx context.Context, sel ast.SelectionSet, v *model.Valuation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Valuation(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
